{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof2(obj) { \"@babel/helpers - typeof\"; return _typeof2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof2(obj); }\n\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.IMask = {}));\n})(void 0, function (exports) {\n  'use strict';\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  var check = function check(it) {\n    return it && it.Math == Math && it;\n  }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\n\n  var global$c = // eslint-disable-next-line es/no-global-this -- safe\n  check((typeof globalThis === \"undefined\" ? \"undefined\" : _typeof2(globalThis)) == 'object' && globalThis) || check((typeof window === \"undefined\" ? \"undefined\" : _typeof2(window)) == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe\n  check((typeof self === \"undefined\" ? \"undefined\" : _typeof2(self)) == 'object' && self) || check(_typeof2(commonjsGlobal) == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback\n  function () {\n    return this;\n  }() || Function('return this')();\n\n  var objectGetOwnPropertyDescriptor = {};\n\n  var fails$6 = function fails$6(exec) {\n    try {\n      return !!exec();\n    } catch (error) {\n      return true;\n    }\n  };\n\n  var fails$5 = fails$6; // Detect IE8's incomplete defineProperty implementation\n\n  var descriptors = !fails$5(function () {\n    // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n    return Object.defineProperty({}, 1, {\n      get: function get() {\n        return 7;\n      }\n    })[1] != 7;\n  });\n  var objectPropertyIsEnumerable = {};\n  var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n\n  var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug\n\n  var NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({\n    1: 2\n  }, 1); // `Object.prototype.propertyIsEnumerable` method implementation\n  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\n\n  objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n    var descriptor = getOwnPropertyDescriptor$1(this, V);\n    return !!descriptor && descriptor.enumerable;\n  } : $propertyIsEnumerable;\n\n  var createPropertyDescriptor$2 = function createPropertyDescriptor$2(bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var toString$3 = {}.toString;\n\n  var classofRaw = function classofRaw(it) {\n    return toString$3.call(it).slice(8, -1);\n  };\n\n  var fails$4 = fails$6;\n  var classof = classofRaw;\n  var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n  var indexedObject = fails$4(function () {\n    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n    // eslint-disable-next-line no-prototype-builtins -- safe\n    return !Object('z').propertyIsEnumerable(0);\n  }) ? function (it) {\n    return classof(it) == 'String' ? split.call(it, '') : Object(it);\n  } : Object; // `RequireObjectCoercible` abstract operation\n  // https://tc39.es/ecma262/#sec-requireobjectcoercible\n\n  var requireObjectCoercible$4 = function requireObjectCoercible$4(it) {\n    if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n    return it;\n  }; // toObject with fallback for non-array-like ES3 strings\n\n\n  var IndexedObject$1 = indexedObject;\n  var requireObjectCoercible$3 = requireObjectCoercible$4;\n\n  var toIndexedObject$3 = function toIndexedObject$3(it) {\n    return IndexedObject$1(requireObjectCoercible$3(it));\n  };\n\n  var isObject$5 = function isObject$5(it) {\n    return _typeof2(it) === 'object' ? it !== null : typeof it === 'function';\n  };\n\n  var global$b = global$c;\n\n  var aFunction = function aFunction(variable) {\n    return typeof variable == 'function' ? variable : undefined;\n  };\n\n  var getBuiltIn$3 = function getBuiltIn$3(namespace, method) {\n    return arguments.length < 2 ? aFunction(global$b[namespace]) : global$b[namespace] && global$b[namespace][method];\n  };\n\n  var getBuiltIn$2 = getBuiltIn$3;\n  var engineUserAgent = getBuiltIn$2('navigator', 'userAgent') || '';\n  var global$a = global$c;\n  var userAgent$1 = engineUserAgent;\n  var process = global$a.process;\n  var Deno = global$a.Deno;\n  var versions = process && process.versions || Deno && Deno.version;\n  var v8 = versions && versions.v8;\n  var match, version;\n\n  if (v8) {\n    match = v8.split('.');\n    version = match[0] < 4 ? 1 : match[0] + match[1];\n  } else if (userAgent$1) {\n    match = userAgent$1.match(/Edge\\/(\\d+)/);\n\n    if (!match || match[1] >= 74) {\n      match = userAgent$1.match(/Chrome\\/(\\d+)/);\n      if (match) version = match[1];\n    }\n  }\n\n  var engineV8Version = version && +version;\n  /* eslint-disable es/no-symbol -- required for testing */\n\n  var V8_VERSION = engineV8Version;\n  var fails$3 = fails$6; // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\n\n  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$3(function () {\n    var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion\n    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n\n    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n  });\n  /* eslint-disable es/no-symbol -- required for testing */\n\n  var NATIVE_SYMBOL$1 = nativeSymbol;\n  var useSymbolAsUid = NATIVE_SYMBOL$1 && !Symbol.sham && _typeof2(Symbol.iterator) == 'symbol';\n  var getBuiltIn$1 = getBuiltIn$3;\n  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;\n  var isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function (it) {\n    return _typeof2(it) == 'symbol';\n  } : function (it) {\n    var $Symbol = getBuiltIn$1('Symbol');\n    return typeof $Symbol == 'function' && Object(it) instanceof $Symbol;\n  };\n  var isObject$4 = isObject$5; // `OrdinaryToPrimitive` abstract operation\n  // https://tc39.es/ecma262/#sec-ordinarytoprimitive\n\n  var ordinaryToPrimitive$1 = function ordinaryToPrimitive$1(input, pref) {\n    var fn, val;\n    if (pref === 'string' && typeof (fn = input.toString) == 'function' && !isObject$4(val = fn.call(input))) return val;\n    if (typeof (fn = input.valueOf) == 'function' && !isObject$4(val = fn.call(input))) return val;\n    if (pref !== 'string' && typeof (fn = input.toString) == 'function' && !isObject$4(val = fn.call(input))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var shared$3 = {\n    exports: {}\n  };\n  var global$9 = global$c;\n\n  var setGlobal$3 = function setGlobal$3(key, value) {\n    try {\n      // eslint-disable-next-line es/no-object-defineproperty -- safe\n      Object.defineProperty(global$9, key, {\n        value: value,\n        configurable: true,\n        writable: true\n      });\n    } catch (error) {\n      global$9[key] = value;\n    }\n\n    return value;\n  };\n\n  var global$8 = global$c;\n  var setGlobal$2 = setGlobal$3;\n  var SHARED = '__core-js_shared__';\n  var store$3 = global$8[SHARED] || setGlobal$2(SHARED, {});\n  var sharedStore = store$3;\n  var store$2 = sharedStore;\n  (shared$3.exports = function (key, value) {\n    return store$2[key] || (store$2[key] = value !== undefined ? value : {});\n  })('versions', []).push({\n    version: '3.17.3',\n    mode: 'global',\n    copyright: 'Â© 2021 Denis Pushkarev (zloirock.ru)'\n  });\n  var requireObjectCoercible$2 = requireObjectCoercible$4; // `ToObject` abstract operation\n  // https://tc39.es/ecma262/#sec-toobject\n\n  var toObject$2 = function toObject$2(argument) {\n    return Object(requireObjectCoercible$2(argument));\n  };\n\n  var toObject$1 = toObject$2;\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  var has$6 = Object.hasOwn || function hasOwn(it, key) {\n    return hasOwnProperty.call(toObject$1(it), key);\n  };\n\n  var id = 0;\n  var postfix = Math.random();\n\n  var uid$2 = function uid$2(key) {\n    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n  };\n\n  var global$7 = global$c;\n  var shared$2 = shared$3.exports;\n  var has$5 = has$6;\n  var uid$1 = uid$2;\n  var NATIVE_SYMBOL = nativeSymbol;\n  var USE_SYMBOL_AS_UID = useSymbolAsUid;\n  var WellKnownSymbolsStore = shared$2('wks');\n  var Symbol$1 = global$7.Symbol;\n  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;\n\n  var wellKnownSymbol$1 = function wellKnownSymbol$1(name) {\n    if (!has$5(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\n      if (NATIVE_SYMBOL && has$5(Symbol$1, name)) {\n        WellKnownSymbolsStore[name] = Symbol$1[name];\n      } else {\n        WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n      }\n    }\n\n    return WellKnownSymbolsStore[name];\n  };\n\n  var isObject$3 = isObject$5;\n  var isSymbol$2 = isSymbol$3;\n  var ordinaryToPrimitive = ordinaryToPrimitive$1;\n  var wellKnownSymbol = wellKnownSymbol$1;\n  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive'); // `ToPrimitive` abstract operation\n  // https://tc39.es/ecma262/#sec-toprimitive\n\n  var toPrimitive$1 = function toPrimitive$1(input, pref) {\n    if (!isObject$3(input) || isSymbol$2(input)) return input;\n    var exoticToPrim = input[TO_PRIMITIVE];\n    var result;\n\n    if (exoticToPrim !== undefined) {\n      if (pref === undefined) pref = 'default';\n      result = exoticToPrim.call(input, pref);\n      if (!isObject$3(result) || isSymbol$2(result)) return result;\n      throw TypeError(\"Can't convert object to primitive value\");\n    }\n\n    if (pref === undefined) pref = 'number';\n    return ordinaryToPrimitive(input, pref);\n  };\n\n  var toPrimitive = toPrimitive$1;\n  var isSymbol$1 = isSymbol$3; // `ToPropertyKey` abstract operation\n  // https://tc39.es/ecma262/#sec-topropertykey\n\n  var toPropertyKey$2 = function toPropertyKey$2(argument) {\n    var key = toPrimitive(argument, 'string');\n    return isSymbol$1(key) ? key : String(key);\n  };\n\n  var global$6 = global$c;\n  var isObject$2 = isObject$5;\n  var document$1 = global$6.document; // typeof document.createElement is 'object' in old IE\n\n  var EXISTS = isObject$2(document$1) && isObject$2(document$1.createElement);\n\n  var documentCreateElement = function documentCreateElement(it) {\n    return EXISTS ? document$1.createElement(it) : {};\n  };\n\n  var DESCRIPTORS$4 = descriptors;\n  var fails$2 = fails$6;\n  var createElement = documentCreateElement; // Thank's IE8 for his funny defineProperty\n\n  var ie8DomDefine = !DESCRIPTORS$4 && !fails$2(function () {\n    // eslint-disable-next-line es/no-object-defineproperty -- requied for testing\n    return Object.defineProperty(createElement('div'), 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  });\n  var DESCRIPTORS$3 = descriptors;\n  var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;\n  var createPropertyDescriptor$1 = createPropertyDescriptor$2;\n  var toIndexedObject$2 = toIndexedObject$3;\n  var toPropertyKey$1 = toPropertyKey$2;\n  var has$4 = has$6;\n  var IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n\n  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\n\n  objectGetOwnPropertyDescriptor.f = DESCRIPTORS$3 ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n    O = toIndexedObject$2(O);\n    P = toPropertyKey$1(P);\n    if (IE8_DOM_DEFINE$1) try {\n      return $getOwnPropertyDescriptor(O, P);\n    } catch (error) {\n      /* empty */\n    }\n    if (has$4(O, P)) return createPropertyDescriptor$1(!propertyIsEnumerableModule$1.f.call(O, P), O[P]);\n  };\n  var objectDefineProperty = {};\n  var isObject$1 = isObject$5;\n\n  var anObject$2 = function anObject$2(it) {\n    if (!isObject$1(it)) {\n      throw TypeError(String(it) + ' is not an object');\n    }\n\n    return it;\n  };\n\n  var DESCRIPTORS$2 = descriptors;\n  var IE8_DOM_DEFINE = ie8DomDefine;\n  var anObject$1 = anObject$2;\n  var toPropertyKey = toPropertyKey$2; // eslint-disable-next-line es/no-object-defineproperty -- safe\n\n  var $defineProperty = Object.defineProperty; // `Object.defineProperty` method\n  // https://tc39.es/ecma262/#sec-object.defineproperty\n\n  objectDefineProperty.f = DESCRIPTORS$2 ? $defineProperty : function defineProperty(O, P, Attributes) {\n    anObject$1(O);\n    P = toPropertyKey(P);\n    anObject$1(Attributes);\n    if (IE8_DOM_DEFINE) try {\n      return $defineProperty(O, P, Attributes);\n    } catch (error) {\n      /* empty */\n    }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n  var DESCRIPTORS$1 = descriptors;\n  var definePropertyModule$1 = objectDefineProperty;\n  var createPropertyDescriptor = createPropertyDescriptor$2;\n  var createNonEnumerableProperty$3 = DESCRIPTORS$1 ? function (object, key, value) {\n    return definePropertyModule$1.f(object, key, createPropertyDescriptor(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n  var redefine$1 = {\n    exports: {}\n  };\n  var store$1 = sharedStore;\n  var functionToString = Function.toString; // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\n\n  if (typeof store$1.inspectSource != 'function') {\n    store$1.inspectSource = function (it) {\n      return functionToString.call(it);\n    };\n  }\n\n  var inspectSource$2 = store$1.inspectSource;\n  var global$5 = global$c;\n  var inspectSource$1 = inspectSource$2;\n  var WeakMap$1 = global$5.WeakMap;\n  var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource$1(WeakMap$1));\n  var shared$1 = shared$3.exports;\n  var uid = uid$2;\n  var keys = shared$1('keys');\n\n  var sharedKey$1 = function sharedKey$1(key) {\n    return keys[key] || (keys[key] = uid(key));\n  };\n\n  var hiddenKeys$3 = {};\n  var NATIVE_WEAK_MAP = nativeWeakMap;\n  var global$4 = global$c;\n  var isObject = isObject$5;\n  var createNonEnumerableProperty$2 = createNonEnumerableProperty$3;\n  var objectHas = has$6;\n  var shared = sharedStore;\n  var sharedKey = sharedKey$1;\n  var hiddenKeys$2 = hiddenKeys$3;\n  var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\n  var WeakMap = global$4.WeakMap;\n  var set$1, get, has$3;\n\n  var enforce = function enforce(it) {\n    return has$3(it) ? get(it) : set$1(it, {});\n  };\n\n  var getterFor = function getterFor(TYPE) {\n    return function (it) {\n      var state;\n\n      if (!isObject(it) || (state = get(it)).type !== TYPE) {\n        throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n      }\n\n      return state;\n    };\n  };\n\n  if (NATIVE_WEAK_MAP || shared.state) {\n    var store = shared.state || (shared.state = new WeakMap());\n    var wmget = store.get;\n    var wmhas = store.has;\n    var wmset = store.set;\n\n    set$1 = function set$1(it, metadata) {\n      if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n      metadata.facade = it;\n      wmset.call(store, it, metadata);\n      return metadata;\n    };\n\n    get = function get(it) {\n      return wmget.call(store, it) || {};\n    };\n\n    has$3 = function has$3(it) {\n      return wmhas.call(store, it);\n    };\n  } else {\n    var STATE = sharedKey('state');\n    hiddenKeys$2[STATE] = true;\n\n    set$1 = function set$1(it, metadata) {\n      if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n      metadata.facade = it;\n      createNonEnumerableProperty$2(it, STATE, metadata);\n      return metadata;\n    };\n\n    get = function get(it) {\n      return objectHas(it, STATE) ? it[STATE] : {};\n    };\n\n    has$3 = function has$3(it) {\n      return objectHas(it, STATE);\n    };\n  }\n\n  var internalState = {\n    set: set$1,\n    get: get,\n    has: has$3,\n    enforce: enforce,\n    getterFor: getterFor\n  };\n  var global$3 = global$c;\n  var createNonEnumerableProperty$1 = createNonEnumerableProperty$3;\n  var has$2 = has$6;\n  var setGlobal$1 = setGlobal$3;\n  var inspectSource = inspectSource$2;\n  var InternalStateModule = internalState;\n  var getInternalState = InternalStateModule.get;\n  var enforceInternalState = InternalStateModule.enforce;\n  var TEMPLATE = String(String).split('String');\n  (redefine$1.exports = function (O, key, value, options) {\n    var unsafe = options ? !!options.unsafe : false;\n    var simple = options ? !!options.enumerable : false;\n    var noTargetGet = options ? !!options.noTargetGet : false;\n    var state;\n\n    if (typeof value == 'function') {\n      if (typeof key == 'string' && !has$2(value, 'name')) {\n        createNonEnumerableProperty$1(value, 'name', key);\n      }\n\n      state = enforceInternalState(value);\n\n      if (!state.source) {\n        state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\n      }\n    }\n\n    if (O === global$3) {\n      if (simple) O[key] = value;else setGlobal$1(key, value);\n      return;\n    } else if (!unsafe) {\n      delete O[key];\n    } else if (!noTargetGet && O[key]) {\n      simple = true;\n    }\n\n    if (simple) O[key] = value;else createNonEnumerableProperty$1(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n  })(Function.prototype, 'toString', function toString() {\n    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n  });\n  var objectGetOwnPropertyNames = {};\n  var ceil$1 = Math.ceil;\n  var floor = Math.floor; // `ToInteger` abstract operation\n  // https://tc39.es/ecma262/#sec-tointeger\n\n  var toInteger$3 = function toInteger$3(argument) {\n    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil$1)(argument);\n  };\n\n  var toInteger$2 = toInteger$3;\n  var min$1 = Math.min; // `ToLength` abstract operation\n  // https://tc39.es/ecma262/#sec-tolength\n\n  var toLength$2 = function toLength$2(argument) {\n    return argument > 0 ? min$1(toInteger$2(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n  };\n\n  var toInteger$1 = toInteger$3;\n  var max = Math.max;\n  var min = Math.min; // Helper for a popular repeating case of the spec:\n  // Let integer be ? ToInteger(index).\n  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\n\n  var toAbsoluteIndex$1 = function toAbsoluteIndex$1(index, length) {\n    var integer = toInteger$1(index);\n    return integer < 0 ? max(integer + length, 0) : min(integer, length);\n  };\n\n  var toIndexedObject$1 = toIndexedObject$3;\n  var toLength$1 = toLength$2;\n  var toAbsoluteIndex = toAbsoluteIndex$1; // `Array.prototype.{ indexOf, includes }` methods implementation\n\n  var createMethod$1 = function createMethod$1(IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = toIndexedObject$1($this);\n      var length = toLength$1(O.length);\n      var index = toAbsoluteIndex(fromIndex, length);\n      var value; // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare -- NaN check\n\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check\n\n        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not\n      } else for (; length > index; index++) {\n        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n      }\n      return !IS_INCLUDES && -1;\n    };\n  };\n\n  var arrayIncludes = {\n    // `Array.prototype.includes` method\n    // https://tc39.es/ecma262/#sec-array.prototype.includes\n    includes: createMethod$1(true),\n    // `Array.prototype.indexOf` method\n    // https://tc39.es/ecma262/#sec-array.prototype.indexof\n    indexOf: createMethod$1(false)\n  };\n  var has$1 = has$6;\n  var toIndexedObject = toIndexedObject$3;\n  var indexOf = arrayIncludes.indexOf;\n  var hiddenKeys$1 = hiddenKeys$3;\n\n  var objectKeysInternal = function objectKeysInternal(object, names) {\n    var O = toIndexedObject(object);\n    var i = 0;\n    var result = [];\n    var key;\n\n    for (key in O) {\n      !has$1(hiddenKeys$1, key) && has$1(O, key) && result.push(key);\n    } // Don't enum bug & hidden keys\n\n\n    while (names.length > i) {\n      if (has$1(O, key = names[i++])) {\n        ~indexOf(result, key) || result.push(key);\n      }\n    }\n\n    return result;\n  }; // IE8- don't enum bug keys\n\n\n  var enumBugKeys$2 = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];\n  var internalObjectKeys$1 = objectKeysInternal;\n  var enumBugKeys$1 = enumBugKeys$2;\n  var hiddenKeys = enumBugKeys$1.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertynames\n  // eslint-disable-next-line es/no-object-getownpropertynames -- safe\n\n  objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n    return internalObjectKeys$1(O, hiddenKeys);\n  };\n\n  var objectGetOwnPropertySymbols = {}; // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\n\n  objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;\n  var getBuiltIn = getBuiltIn$3;\n  var getOwnPropertyNamesModule = objectGetOwnPropertyNames;\n  var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;\n  var anObject = anObject$2; // all object keys, includes non-enumerable and symbols\n\n  var ownKeys$1 = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n    var keys = getOwnPropertyNamesModule.f(anObject(it));\n    var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;\n    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n  };\n\n  var has = has$6;\n  var ownKeys = ownKeys$1;\n  var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;\n  var definePropertyModule = objectDefineProperty;\n\n  var copyConstructorProperties$1 = function copyConstructorProperties$1(target, source) {\n    var keys = ownKeys(source);\n    var defineProperty = definePropertyModule.f;\n    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  };\n\n  var fails$1 = fails$6;\n  var replacement = /#|\\.prototype\\./;\n\n  var isForced$1 = function isForced$1(feature, detection) {\n    var value = data[normalize(feature)];\n    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails$1(detection) : !!detection;\n  };\n\n  var normalize = isForced$1.normalize = function (string) {\n    return String(string).replace(replacement, '.').toLowerCase();\n  };\n\n  var data = isForced$1.data = {};\n  var NATIVE = isForced$1.NATIVE = 'N';\n  var POLYFILL = isForced$1.POLYFILL = 'P';\n  var isForced_1 = isForced$1;\n  var global$2 = global$c;\n  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\n  var createNonEnumerableProperty = createNonEnumerableProperty$3;\n  var redefine = redefine$1.exports;\n  var setGlobal = setGlobal$3;\n  var copyConstructorProperties = copyConstructorProperties$1;\n  var isForced = isForced_1;\n  /*\n    options.target      - name of the target object\n    options.global      - target is the global object\n    options.stat        - export as static methods of target\n    options.proto       - export as prototype methods of target\n    options.real        - real prototype method for the `pure` version\n    options.forced      - export even if the native feature is available\n    options.bind        - bind methods to the target, required for the `pure` version\n    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n    options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n    options.sham        - add a flag to not completely full polyfills\n    options.enumerable  - export as enumerable property\n    options.noTargetGet - prevent calling a getter on target\n  */\n\n  var _export = function _export(options, source) {\n    var TARGET = options.target;\n    var GLOBAL = options.global;\n    var STATIC = options.stat;\n    var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n\n    if (GLOBAL) {\n      target = global$2;\n    } else if (STATIC) {\n      target = global$2[TARGET] || setGlobal(TARGET, {});\n    } else {\n      target = (global$2[TARGET] || {}).prototype;\n    }\n\n    if (target) for (key in source) {\n      sourceProperty = source[key];\n\n      if (options.noTargetGet) {\n        descriptor = getOwnPropertyDescriptor(target, key);\n        targetProperty = descriptor && descriptor.value;\n      } else targetProperty = target[key];\n\n      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target\n\n      if (!FORCED && targetProperty !== undefined) {\n        if (_typeof2(sourceProperty) === _typeof2(targetProperty)) continue;\n        copyConstructorProperties(sourceProperty, targetProperty);\n      } // add a flag to not completely full polyfills\n\n\n      if (options.sham || targetProperty && targetProperty.sham) {\n        createNonEnumerableProperty(sourceProperty, 'sham', true);\n      } // extend global\n\n\n      redefine(target, key, sourceProperty, options);\n    }\n  };\n\n  var internalObjectKeys = objectKeysInternal;\n  var enumBugKeys = enumBugKeys$2; // `Object.keys` method\n  // https://tc39.es/ecma262/#sec-object.keys\n  // eslint-disable-next-line es/no-object-keys -- safe\n\n  var objectKeys$1 = Object.keys || function keys(O) {\n    return internalObjectKeys(O, enumBugKeys);\n  };\n\n  var DESCRIPTORS = descriptors;\n  var fails = fails$6;\n  var objectKeys = objectKeys$1;\n  var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;\n  var propertyIsEnumerableModule = objectPropertyIsEnumerable;\n  var toObject = toObject$2;\n  var IndexedObject = indexedObject; // eslint-disable-next-line es/no-object-assign -- safe\n\n  var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n\n  var defineProperty = Object.defineProperty; // `Object.assign` method\n  // https://tc39.es/ecma262/#sec-object.assign\n\n  var objectAssign = !$assign || fails(function () {\n    // should have correct order of operations (Edge bug)\n    if (DESCRIPTORS && $assign({\n      b: 1\n    }, $assign(defineProperty({}, 'a', {\n      enumerable: true,\n      get: function get() {\n        defineProperty(this, 'b', {\n          value: 3,\n          enumerable: false\n        });\n      }\n    }), {\n      b: 2\n    })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)\n\n    var A = {};\n    var B = {}; // eslint-disable-next-line es/no-symbol -- safe\n\n    var symbol = Symbol();\n    var alphabet = 'abcdefghijklmnopqrst';\n    A[symbol] = 7;\n    alphabet.split('').forEach(function (chr) {\n      B[chr] = chr;\n    });\n    return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;\n  }) ? function assign(target, source) {\n    // eslint-disable-line no-unused-vars -- required for `.length`\n    var T = toObject(target);\n    var argumentsLength = arguments.length;\n    var index = 1;\n    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n    var propertyIsEnumerable = propertyIsEnumerableModule.f;\n\n    while (argumentsLength > index) {\n      var S = IndexedObject(arguments[index++]);\n      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n      var length = keys.length;\n      var j = 0;\n      var key;\n\n      while (length > j) {\n        key = keys[j++];\n        if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n      }\n    }\n\n    return T;\n  } : $assign;\n  var $$4 = _export;\n  var assign = objectAssign; // `Object.assign` method\n  // https://tc39.es/ecma262/#sec-object.assign\n  // eslint-disable-next-line es/no-object-assign -- required for testing\n\n  $$4({\n    target: 'Object',\n    stat: true,\n    forced: Object.assign !== assign\n  }, {\n    assign: assign\n  });\n  var isSymbol = isSymbol$3;\n\n  var toString$2 = function toString$2(argument) {\n    if (isSymbol(argument)) throw TypeError('Cannot convert a Symbol value to a string');\n    return String(argument);\n  };\n\n  var toInteger = toInteger$3;\n  var toString$1 = toString$2;\n  var requireObjectCoercible$1 = requireObjectCoercible$4; // `String.prototype.repeat` method implementation\n  // https://tc39.es/ecma262/#sec-string.prototype.repeat\n\n  var stringRepeat = function repeat(count) {\n    var str = toString$1(requireObjectCoercible$1(this));\n    var result = '';\n    var n = toInteger(count);\n    if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n\n    for (; n > 0; (n >>>= 1) && (str += str)) {\n      if (n & 1) result += str;\n    }\n\n    return result;\n  };\n\n  var $$3 = _export;\n  var repeat$1 = stringRepeat; // `String.prototype.repeat` method\n  // https://tc39.es/ecma262/#sec-string.prototype.repeat\n\n  $$3({\n    target: 'String',\n    proto: true\n  }, {\n    repeat: repeat$1\n  }); // https://github.com/tc39/proposal-string-pad-start-end\n\n  var toLength = toLength$2;\n  var toString = toString$2;\n  var repeat = stringRepeat;\n  var requireObjectCoercible = requireObjectCoercible$4;\n  var ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation\n\n  var createMethod = function createMethod(IS_END) {\n    return function ($this, maxLength, fillString) {\n      var S = toString(requireObjectCoercible($this));\n      var stringLength = S.length;\n      var fillStr = fillString === undefined ? ' ' : toString(fillString);\n      var intMaxLength = toLength(maxLength);\n      var fillLen, stringFiller;\n      if (intMaxLength <= stringLength || fillStr == '') return S;\n      fillLen = intMaxLength - stringLength;\n      stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));\n      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n      return IS_END ? S + stringFiller : stringFiller + S;\n    };\n  };\n\n  var stringPad = {\n    // `String.prototype.padStart` method\n    // https://tc39.es/ecma262/#sec-string.prototype.padstart\n    start: createMethod(false),\n    // `String.prototype.padEnd` method\n    // https://tc39.es/ecma262/#sec-string.prototype.padend\n    end: createMethod(true)\n  }; // https://github.com/zloirock/core-js/issues/280\n\n  var userAgent = engineUserAgent; // eslint-disable-next-line unicorn/no-unsafe-regex -- safe\n\n  var stringPadWebkitBug = /Version\\/10(?:\\.\\d+){1,2}(?: [\\w./]+)?(?: Mobile\\/\\w+)? Safari\\//.test(userAgent);\n  var $$2 = _export;\n  var $padStart = stringPad.start;\n  var WEBKIT_BUG$1 = stringPadWebkitBug; // `String.prototype.padStart` method\n  // https://tc39.es/ecma262/#sec-string.prototype.padstart\n\n  $$2({\n    target: 'String',\n    proto: true,\n    forced: WEBKIT_BUG$1\n  }, {\n    padStart: function padStart(maxLength\n    /* , fillString = ' ' */\n    ) {\n      return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n  var $$1 = _export;\n  var $padEnd = stringPad.end;\n  var WEBKIT_BUG = stringPadWebkitBug; // `String.prototype.padEnd` method\n  // https://tc39.es/ecma262/#sec-string.prototype.padend\n\n  $$1({\n    target: 'String',\n    proto: true,\n    forced: WEBKIT_BUG\n  }, {\n    padEnd: function padEnd(maxLength\n    /* , fillString = ' ' */\n    ) {\n      return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n  var $ = _export;\n  var global$1 = global$c; // `globalThis` object\n  // https://tc39.es/ecma262/#sec-globalthis\n\n  $({\n    global: true\n  }, {\n    globalThis: global$1\n  });\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (_typeof2(call) === \"object\" || typeof call === \"function\")) {\n      return call;\n    } else if (call !== void 0) {\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function set(target, property, value, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.set) {\n      set = Reflect.set;\n    } else {\n      set = function set(target, property, value, receiver) {\n        var base = _superPropBase(target, property);\n\n        var desc;\n\n        if (base) {\n          desc = Object.getOwnPropertyDescriptor(base, property);\n\n          if (desc.set) {\n            desc.set.call(receiver, value);\n            return true;\n          } else if (!desc.writable) {\n            return false;\n          }\n        }\n\n        desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n        if (desc) {\n          if (!desc.writable) {\n            return false;\n          }\n\n          desc.value = value;\n          Object.defineProperty(receiver, property, desc);\n        } else {\n          _defineProperty(receiver, property, value);\n        }\n\n        return true;\n      };\n    }\n\n    return set(target, property, value, receiver);\n  }\n\n  function _set(target, property, value, receiver, isStrict) {\n    var s = set(target, property, value, receiver || target);\n\n    if (!s && isStrict) {\n      throw new Error('failed to set property');\n    }\n\n    return value;\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n\n    var _s, _e;\n\n    try {\n      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  /** Checks if value is string */\n\n\n  function isString(str) {\n    return typeof str === 'string' || str instanceof String;\n  }\n  /**\n    Direction\n    @prop {string} NONE\n    @prop {string} LEFT\n    @prop {string} FORCE_LEFT\n    @prop {string} RIGHT\n    @prop {string} FORCE_RIGHT\n  */\n\n\n  var DIRECTION = {\n    NONE: 'NONE',\n    LEFT: 'LEFT',\n    FORCE_LEFT: 'FORCE_LEFT',\n    RIGHT: 'RIGHT',\n    FORCE_RIGHT: 'FORCE_RIGHT'\n  };\n  /** */\n\n  function forceDirection(direction) {\n    switch (direction) {\n      case DIRECTION.LEFT:\n        return DIRECTION.FORCE_LEFT;\n\n      case DIRECTION.RIGHT:\n        return DIRECTION.FORCE_RIGHT;\n\n      default:\n        return direction;\n    }\n  }\n  /** Escapes regular expression control chars */\n\n\n  function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  } // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\n\n\n  function objectIncludes(b, a) {\n    if (a === b) return true;\n    var arrA = Array.isArray(a),\n        arrB = Array.isArray(b),\n        i;\n\n    if (arrA && arrB) {\n      if (a.length != b.length) return false;\n\n      for (i = 0; i < a.length; i++) {\n        if (!objectIncludes(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    if (a && b && _typeof(a) === 'object' && _typeof(b) === 'object') {\n      var dateA = a instanceof Date,\n          dateB = b instanceof Date;\n      if (dateA && dateB) return a.getTime() == b.getTime();\n      if (dateA != dateB) return false;\n      var regexpA = a instanceof RegExp,\n          regexpB = b instanceof RegExp;\n      if (regexpA && regexpB) return a.toString() == b.toString();\n      if (regexpA != regexpB) return false;\n      var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;\n\n      for (i = 0; i < keys.length; i++) {\n        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n      }\n\n      for (i = 0; i < keys.length; i++) {\n        if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n      }\n\n      return true;\n    } else if (a && b && typeof a === 'function' && typeof b === 'function') {\n      return a.toString() === b.toString();\n    }\n\n    return false;\n  }\n  /** Selection range */\n\n  /** Provides details of changing input */\n\n\n  var ActionDetails = /*#__PURE__*/function () {\n    /** Current input value */\n\n    /** Current cursor position */\n\n    /** Old input value */\n\n    /** Old selection */\n    function ActionDetails(value, cursorPos, oldValue, oldSelection) {\n      _classCallCheck(this, ActionDetails);\n\n      this.value = value;\n      this.cursorPos = cursorPos;\n      this.oldValue = oldValue;\n      this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\n\n      while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n        --this.oldSelection.start;\n      }\n    }\n    /**\n      Start changing position\n      @readonly\n    */\n\n\n    _createClass(ActionDetails, [{\n      key: \"startChangePos\",\n      get: function get() {\n        return Math.min(this.cursorPos, this.oldSelection.start);\n      }\n      /**\n        Inserted symbols count\n        @readonly\n      */\n\n    }, {\n      key: \"insertedCount\",\n      get: function get() {\n        return this.cursorPos - this.startChangePos;\n      }\n      /**\n        Inserted symbols\n        @readonly\n      */\n\n    }, {\n      key: \"inserted\",\n      get: function get() {\n        return this.value.substr(this.startChangePos, this.insertedCount);\n      }\n      /**\n        Removed symbols count\n        @readonly\n      */\n\n    }, {\n      key: \"removedCount\",\n      get: function get() {\n        // Math.max for opposite operation\n        return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\n        this.oldValue.length - this.value.length, 0);\n      }\n      /**\n        Removed symbols\n        @readonly\n      */\n\n    }, {\n      key: \"removed\",\n      get: function get() {\n        return this.oldValue.substr(this.startChangePos, this.removedCount);\n      }\n      /**\n        Unchanged head symbols\n        @readonly\n      */\n\n    }, {\n      key: \"head\",\n      get: function get() {\n        return this.value.substring(0, this.startChangePos);\n      }\n      /**\n        Unchanged tail symbols\n        @readonly\n      */\n\n    }, {\n      key: \"tail\",\n      get: function get() {\n        return this.value.substring(this.startChangePos + this.insertedCount);\n      }\n      /**\n        Remove direction\n        @readonly\n      */\n\n    }, {\n      key: \"removeDirection\",\n      get: function get() {\n        if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right or if range removed (event with backspace)\n\n        return this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? DIRECTION.RIGHT : DIRECTION.LEFT;\n      }\n    }]);\n\n    return ActionDetails;\n  }();\n  /**\n    Provides details of changing model value\n    @param {Object} [details]\n    @param {string} [details.inserted] - Inserted symbols\n    @param {boolean} [details.skip] - Can skip chars\n    @param {number} [details.removeCount] - Removed symbols count\n    @param {number} [details.tailShift] - Additional offset if any changes occurred before tail\n  */\n\n\n  var ChangeDetails = /*#__PURE__*/function () {\n    /** Inserted symbols */\n\n    /** Can skip chars */\n\n    /** Additional offset if any changes occurred before tail */\n\n    /** Raw inserted is used by dynamic mask */\n    function ChangeDetails(details) {\n      _classCallCheck(this, ChangeDetails);\n\n      Object.assign(this, {\n        inserted: '',\n        rawInserted: '',\n        skip: false,\n        tailShift: 0\n      }, details);\n    }\n    /**\n      Aggregate changes\n      @returns {ChangeDetails} `this`\n    */\n\n\n    _createClass(ChangeDetails, [{\n      key: \"aggregate\",\n      value: function aggregate(details) {\n        this.rawInserted += details.rawInserted;\n        this.skip = this.skip || details.skip;\n        this.inserted += details.inserted;\n        this.tailShift += details.tailShift;\n        return this;\n      }\n      /** Total offset considering all changes */\n\n    }, {\n      key: \"offset\",\n      get: function get() {\n        return this.tailShift + this.inserted.length;\n      }\n    }]);\n\n    return ChangeDetails;\n  }();\n  /** Provides details of continuous extracted tail */\n\n\n  var ContinuousTailDetails = /*#__PURE__*/function () {\n    /** Tail value as string */\n\n    /** Tail start position */\n\n    /** Start position */\n    function ContinuousTailDetails() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var stop = arguments.length > 2 ? arguments[2] : undefined;\n\n      _classCallCheck(this, ContinuousTailDetails);\n\n      this.value = value;\n      this.from = from;\n      this.stop = stop;\n    }\n\n    _createClass(ContinuousTailDetails, [{\n      key: \"toString\",\n      value: function toString() {\n        return this.value;\n      }\n    }, {\n      key: \"extend\",\n      value: function extend(tail) {\n        this.value += String(tail);\n      }\n    }, {\n      key: \"appendTo\",\n      value: function appendTo(masked) {\n        return masked.append(this.toString(), {\n          tail: true\n        }).aggregate(masked._appendPlaceholder());\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          value: this.value,\n          from: this.from,\n          stop: this.stop\n        };\n      },\n      set: function set(state) {\n        Object.assign(this, state);\n      }\n    }, {\n      key: \"shiftBefore\",\n      value: function shiftBefore(pos) {\n        if (this.from >= pos || !this.value.length) return '';\n        var shiftChar = this.value[0];\n        this.value = this.value.slice(1);\n        return shiftChar;\n      }\n    }]);\n\n    return ContinuousTailDetails;\n  }();\n  /**\n   * Applies mask on element.\n   * @constructor\n   * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\n   * @param {Object} opts - Custom mask options\n   * @return {InputMask}\n   */\n\n\n  function IMask(el) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // currently available only for input-like elements\n\n    return new IMask.InputMask(el, opts);\n  }\n  /** Supported mask type */\n\n  /** Provides common masking stuff */\n\n\n  var Masked = /*#__PURE__*/function () {\n    // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\n\n    /** @type {Mask} */\n\n    /** */\n    // $FlowFixMe no ideas\n\n    /** Transforms value before mask processing */\n\n    /** Validates if value is acceptable */\n\n    /** Does additional processing in the end of editing */\n\n    /** Format typed value to string */\n\n    /** Parse strgin to get typed value */\n\n    /** Enable characters overwriting */\n\n    /** */\n    function Masked(opts) {\n      _classCallCheck(this, Masked);\n\n      this._value = '';\n\n      this._update(Object.assign({}, Masked.DEFAULTS, opts));\n\n      this.isInitialized = true;\n    }\n    /** Sets and applies new options */\n\n\n    _createClass(Masked, [{\n      key: \"updateOptions\",\n      value: function updateOptions(opts) {\n        if (!Object.keys(opts).length) return;\n        this.withValueRefresh(this._update.bind(this, opts));\n      }\n      /**\n        Sets new options\n        @protected\n      */\n\n    }, {\n      key: \"_update\",\n      value: function _update(opts) {\n        Object.assign(this, opts);\n      }\n      /** Mask state */\n\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          _value: this.value\n        };\n      },\n      set: function set(state) {\n        this._value = state._value;\n      }\n      /** Resets value */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._value = '';\n      }\n      /** */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(value) {\n        this.resolve(value);\n      }\n      /** Resolve new value */\n\n    }, {\n      key: \"resolve\",\n      value: function resolve(value) {\n        this.reset();\n        this.append(value, {\n          input: true\n        }, '');\n        this.doCommit();\n        return this.value;\n      }\n      /** */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        this.reset();\n        this.append(value, {}, '');\n        this.doCommit();\n      }\n      /** */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return this.doParse(this.value);\n      },\n      set: function set(value) {\n        this.value = this.doFormat(value);\n      }\n      /** Value that includes raw user input */\n\n    }, {\n      key: \"rawInputValue\",\n      get: function get() {\n        return this.extractInput(0, this.value.length, {\n          raw: true\n        });\n      },\n      set: function set(value) {\n        this.reset();\n        this.append(value, {\n          raw: true\n        }, '');\n        this.doCommit();\n      }\n      /** */\n\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return true;\n      }\n      /** Finds nearest input position in direction */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos, direction) {\n        return cursorPos;\n      }\n      /** Extracts value in range considering flags */\n\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return this.value.slice(fromPos, toPos);\n      }\n      /** Extracts tail in range */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\n      }\n      /** Appends tail */\n      // $FlowFixMe no ideas\n\n    }, {\n      key: \"appendTail\",\n      value: function appendTail(tail) {\n        if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n        return tail.appendTo(this);\n      }\n      /** Appends char */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        if (!ch) return new ChangeDetails();\n        this._value += ch;\n        return new ChangeDetails({\n          inserted: ch,\n          rawInserted: ch\n        });\n      }\n      /** Appends char */\n\n    }, {\n      key: \"_appendChar\",\n      value: function _appendChar(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var checkTail = arguments.length > 2 ? arguments[2] : undefined;\n        var consistentState = this.state;\n\n        var details = this._appendCharRaw(this.doPrepare(ch, flags), flags);\n\n        if (details.inserted) {\n          var consistentTail;\n          var appended = this.doValidate(flags) !== false;\n\n          if (appended && checkTail != null) {\n            // validation ok, check tail\n            var beforeTailState = this.state;\n\n            if (this.overwrite) {\n              consistentTail = checkTail.state;\n              checkTail.shiftBefore(this.value.length);\n            }\n\n            var tailDetails = this.appendTail(checkTail);\n            appended = tailDetails.rawInserted === checkTail.toString(); // if ok, rollback state after tail\n\n            if (appended && tailDetails.inserted) this.state = beforeTailState;\n          } // revert all if something went wrong\n\n\n          if (!appended) {\n            details = new ChangeDetails();\n            this.state = consistentState;\n            if (checkTail && consistentTail) checkTail.state = consistentTail;\n          }\n        }\n\n        return details;\n      }\n      /** Appends optional placeholder at end */\n\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder() {\n        return new ChangeDetails();\n      }\n      /** Appends symbols considering flags */\n      // $FlowFixMe no ideas\n\n    }, {\n      key: \"append\",\n      value: function append(str, flags, tail) {\n        if (!isString(str)) throw new Error('value should be string');\n        var details = new ChangeDetails();\n        var checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;\n        if (flags && flags.tail) flags._beforeTailState = this.state;\n\n        for (var ci = 0; ci < str.length; ++ci) {\n          details.aggregate(this._appendChar(str[ci], flags, checkTail));\n        } // append tail but aggregate only tailShift\n\n\n        if (checkTail != null) {\n          details.tailShift += this.appendTail(checkTail).tailShift; // TODO it's a good idea to clear state after appending ends\n          // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n          // this._resetBeforeTailState();\n        }\n\n        return details;\n      }\n      /** */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\n        return new ChangeDetails();\n      }\n      /** Calls function and reapplies current value */\n\n    }, {\n      key: \"withValueRefresh\",\n      value: function withValueRefresh(fn) {\n        if (this._refreshing || !this.isInitialized) return fn();\n        this._refreshing = true;\n        var rawInput = this.rawInputValue;\n        var value = this.value;\n        var ret = fn();\n        this.rawInputValue = rawInput; // append lost trailing chars at end\n\n        if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\n          this.append(value.slice(this.value.length), {}, '');\n        }\n\n        delete this._refreshing;\n        return ret;\n      }\n      /** */\n\n    }, {\n      key: \"runIsolated\",\n      value: function runIsolated(fn) {\n        if (this._isolated || !this.isInitialized) return fn(this);\n        this._isolated = true;\n        var state = this.state;\n        var ret = fn(this);\n        this.state = state;\n        delete this._isolated;\n        return ret;\n      }\n      /**\n        Prepares string before mask processing\n        @protected\n      */\n\n    }, {\n      key: \"doPrepare\",\n      value: function doPrepare(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.prepare ? this.prepare(str, this, flags) : str;\n      }\n      /**\n        Validates if value is acceptable\n        @protected\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate(flags) {\n        return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\n      }\n      /**\n        Does additional processing in the end of editing\n        @protected\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        if (this.commit) this.commit(this.value, this);\n      }\n      /** */\n\n    }, {\n      key: \"doFormat\",\n      value: function doFormat(value) {\n        return this.format ? this.format(value, this) : value;\n      }\n      /** */\n\n    }, {\n      key: \"doParse\",\n      value: function doParse(str) {\n        return this.parse ? this.parse(str, this) : str;\n      }\n      /** */\n\n    }, {\n      key: \"splice\",\n      value: function splice(start, deleteCount, inserted, removeDirection) {\n        var tailPos = start + deleteCount;\n        var tail = this.extractTail(tailPos);\n        var startChangePos = this.nearestInputPos(start, removeDirection);\n        var changeDetails = new ChangeDetails({\n          tailShift: startChangePos - start // adjust tailShift if start was aligned\n\n        }).aggregate(this.remove(startChangePos)).aggregate(this.append(inserted, {\n          input: true\n        }, tail));\n        return changeDetails;\n      }\n    }]);\n\n    return Masked;\n  }();\n\n  Masked.DEFAULTS = {\n    format: function format(v) {\n      return v;\n    },\n    parse: function parse(v) {\n      return v;\n    }\n  };\n  IMask.Masked = Masked;\n  /** Get Masked class by mask type */\n\n  function maskedClass(mask) {\n    if (mask == null) {\n      throw new Error('mask property should be defined');\n    } // $FlowFixMe\n\n\n    if (mask instanceof RegExp) return IMask.MaskedRegExp; // $FlowFixMe\n\n    if (isString(mask)) return IMask.MaskedPattern; // $FlowFixMe\n\n    if (mask instanceof Date || mask === Date) return IMask.MaskedDate; // $FlowFixMe\n\n    if (mask instanceof Number || typeof mask === 'number' || mask === Number) return IMask.MaskedNumber; // $FlowFixMe\n\n    if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic; // $FlowFixMe\n\n    if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask; // $FlowFixMe\n\n    if (mask instanceof Function) return IMask.MaskedFunction; // $FlowFixMe\n\n    if (mask instanceof IMask.Masked) return mask.constructor;\n    console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n    // $FlowFixMe\n\n    return IMask.Masked;\n  }\n  /** Creates new {@link Masked} depending on mask type */\n\n\n  function createMask(opts) {\n    // $FlowFixMe\n    if (IMask.Masked && opts instanceof IMask.Masked) return opts;\n    opts = Object.assign({}, opts);\n    var mask = opts.mask; // $FlowFixMe\n\n    if (IMask.Masked && mask instanceof IMask.Masked) return mask;\n    var MaskedClass = maskedClass(mask);\n    if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');\n    return new MaskedClass(opts);\n  }\n\n  IMask.createMask = createMask;\n  var _excluded$4 = [\"mask\"];\n  var DEFAULT_INPUT_DEFINITIONS = {\n    '0': /\\d/,\n    'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    // http://stackoverflow.com/a/22075070\n    '*': /./\n  };\n  /** */\n\n  var PatternInputDefinition = /*#__PURE__*/function () {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n    function PatternInputDefinition(opts) {\n      _classCallCheck(this, PatternInputDefinition);\n\n      var mask = opts.mask,\n          blockOpts = _objectWithoutProperties(opts, _excluded$4);\n\n      this.masked = createMask({\n        mask: mask\n      });\n      Object.assign(this, blockOpts);\n    }\n\n    _createClass(PatternInputDefinition, [{\n      key: \"reset\",\n      value: function reset() {\n        this._isFilled = false;\n        this.masked.reset();\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        if (fromPos === 0 && toPos >= 1) {\n          this._isFilled = false;\n          return this.masked.remove(fromPos, toPos);\n        }\n\n        return new ChangeDetails();\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.masked.value || (this._isFilled && !this.isOptional ? this.placeholderChar : '');\n      }\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.masked.unmaskedValue;\n      }\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return Boolean(this.masked.value) || this.isOptional;\n      }\n    }, {\n      key: \"_appendChar\",\n      value: function _appendChar(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (this._isFilled) return new ChangeDetails();\n        var state = this.masked.state; // simulate input\n\n        var details = this.masked._appendChar(str, flags);\n\n        if (details.inserted && this.doValidate(flags) === false) {\n          details.inserted = details.rawInserted = '';\n          this.masked.state = state;\n        }\n\n        if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n          details.inserted = this.placeholderChar;\n        }\n\n        details.skip = !details.inserted && !this.isOptional;\n        this._isFilled = Boolean(details.inserted);\n        return details;\n      }\n    }, {\n      key: \"append\",\n      value: function append() {\n        var _this$masked;\n\n        return (_this$masked = this.masked).append.apply(_this$masked, arguments);\n      }\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder() {\n        var details = new ChangeDetails();\n        if (this._isFilled || this.isOptional) return details;\n        this._isFilled = true;\n        details.inserted = this.placeholderChar;\n        return details;\n      }\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var _this$masked2;\n\n        return (_this$masked2 = this.masked).extractTail.apply(_this$masked2, arguments);\n      }\n    }, {\n      key: \"appendTail\",\n      value: function appendTail() {\n        var _this$masked3;\n\n        return (_this$masked3 = this.masked).appendTail.apply(_this$masked3, arguments);\n      }\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var flags = arguments.length > 2 ? arguments[2] : undefined;\n        return this.masked.extractInput(fromPos, toPos, flags);\n      }\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n        var minPos = 0;\n        var maxPos = this.value.length;\n        var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n\n        switch (direction) {\n          case DIRECTION.LEFT:\n          case DIRECTION.FORCE_LEFT:\n            return this.isComplete ? boundPos : minPos;\n\n          case DIRECTION.RIGHT:\n          case DIRECTION.FORCE_RIGHT:\n            return this.isComplete ? boundPos : maxPos;\n\n          case DIRECTION.NONE:\n          default:\n            return boundPos;\n        }\n      }\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _this$masked4, _this$parent;\n\n        return (_this$masked4 = this.masked).doValidate.apply(_this$masked4, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));\n      }\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        this.masked.doCommit();\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          masked: this.masked.state,\n          _isFilled: this._isFilled\n        };\n      },\n      set: function set(state) {\n        this.masked.state = state.masked;\n        this._isFilled = state._isFilled;\n      }\n    }]);\n\n    return PatternInputDefinition;\n  }();\n\n  var PatternFixedDefinition = /*#__PURE__*/function () {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n    function PatternFixedDefinition(opts) {\n      _classCallCheck(this, PatternFixedDefinition);\n\n      Object.assign(this, opts);\n      this._value = '';\n    }\n\n    _createClass(PatternFixedDefinition, [{\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      }\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.isUnmasking ? this.value : '';\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._isRawInput = false;\n        this._value = '';\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n        this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n        if (!this._value) this._isRawInput = false;\n        return new ChangeDetails();\n      }\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n        var minPos = 0;\n        var maxPos = this._value.length;\n\n        switch (direction) {\n          case DIRECTION.LEFT:\n          case DIRECTION.FORCE_LEFT:\n            return minPos;\n\n          case DIRECTION.NONE:\n          case DIRECTION.RIGHT:\n          case DIRECTION.FORCE_RIGHT:\n          default:\n            return maxPos;\n        }\n      }\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n      }\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return true;\n      }\n    }, {\n      key: \"_appendChar\",\n      value: function _appendChar(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var details = new ChangeDetails();\n        if (this._value) return details;\n        var appended = this.char === str[0];\n        var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !flags.tail;\n        if (isResolved) details.rawInserted = this.char;\n        this._value = details.inserted = this.char;\n        this._isRawInput = isResolved && (flags.raw || flags.input);\n        return details;\n      }\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder() {\n        var details = new ChangeDetails();\n        if (this._value) return details;\n        this._value = details.inserted = this.char;\n        return details;\n      }\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return new ContinuousTailDetails('');\n      } // $FlowFixMe no ideas\n\n    }, {\n      key: \"appendTail\",\n      value: function appendTail(tail) {\n        if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n        return tail.appendTo(this);\n      }\n    }, {\n      key: \"append\",\n      value: function append(str, flags, tail) {\n        var details = this._appendChar(str, flags);\n\n        if (tail != null) {\n          details.tailShift += this.appendTail(tail).tailShift;\n        }\n\n        return details;\n      }\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {}\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          _value: this._value,\n          _isRawInput: this._isRawInput\n        };\n      },\n      set: function set(state) {\n        Object.assign(this, state);\n      }\n    }]);\n\n    return PatternFixedDefinition;\n  }();\n\n  var _excluded$3 = [\"chunks\"];\n\n  var ChunksTailDetails = /*#__PURE__*/function () {\n    /** */\n    function ChunksTailDetails() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      _classCallCheck(this, ChunksTailDetails);\n\n      this.chunks = chunks;\n      this.from = from;\n    }\n\n    _createClass(ChunksTailDetails, [{\n      key: \"toString\",\n      value: function toString() {\n        return this.chunks.map(String).join('');\n      } // $FlowFixMe no ideas\n\n    }, {\n      key: \"extend\",\n      value: function extend(tailChunk) {\n        if (!String(tailChunk)) return;\n        if (isString(tailChunk)) tailChunk = new ContinuousTailDetails(String(tailChunk));\n        var lastChunk = this.chunks[this.chunks.length - 1];\n        var extendLast = lastChunk && (lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk\n        tailChunk.from === lastChunk.from + lastChunk.toString().length;\n\n        if (tailChunk instanceof ContinuousTailDetails) {\n          // check the ability to extend previous chunk\n          if (extendLast) {\n            // extend previous chunk\n            lastChunk.extend(tailChunk.toString());\n          } else {\n            // append new chunk\n            this.chunks.push(tailChunk);\n          }\n        } else if (tailChunk instanceof ChunksTailDetails) {\n          if (tailChunk.stop == null) {\n            // unwrap floating chunks to parent, keeping `from` pos\n            var firstTailChunk;\n\n            while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n              firstTailChunk = tailChunk.chunks.shift();\n              firstTailChunk.from += tailChunk.from;\n              this.extend(firstTailChunk);\n            }\n          } // if tail chunk still has value\n\n\n          if (tailChunk.toString()) {\n            // if chunks contains stops, then popup stop to container\n            tailChunk.stop = tailChunk.blockIndex;\n            this.chunks.push(tailChunk);\n          }\n        }\n      }\n    }, {\n      key: \"appendTo\",\n      value: function appendTo(masked) {\n        // $FlowFixMe\n        if (!(masked instanceof IMask.MaskedPattern)) {\n          var tail = new ContinuousTailDetails(this.toString());\n          return tail.appendTo(masked);\n        }\n\n        var details = new ChangeDetails();\n\n        for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\n          var chunk = this.chunks[ci];\n\n          var lastBlockIter = masked._mapPosToBlock(masked.value.length);\n\n          var stop = chunk.stop;\n          var chunkBlock = void 0;\n\n          if (stop != null && (!lastBlockIter || lastBlockIter.index <= stop)) {\n            if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist\n            masked._stops.indexOf(stop) >= 0) {\n              details.aggregate(masked._appendPlaceholder(stop));\n            }\n\n            chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n          }\n\n          if (chunkBlock) {\n            var tailDetails = chunkBlock.appendTail(chunk);\n            tailDetails.skip = false; // always ignore skip, it will be set on last\n\n            details.aggregate(tailDetails);\n            masked._value += tailDetails.inserted; // get not inserted chars\n\n            var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n            if (remainChars) details.aggregate(masked.append(remainChars, {\n              tail: true\n            }));\n          } else {\n            details.aggregate(masked.append(chunk.toString(), {\n              tail: true\n            }));\n          }\n        }\n\n        return details;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          chunks: this.chunks.map(function (c) {\n            return c.state;\n          }),\n          from: this.from,\n          stop: this.stop,\n          blockIndex: this.blockIndex\n        };\n      },\n      set: function set(state) {\n        var chunks = state.chunks,\n            props = _objectWithoutProperties(state, _excluded$3);\n\n        Object.assign(this, props);\n        this.chunks = chunks.map(function (cstate) {\n          var chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails(); // $FlowFixMe already checked above\n\n          chunk.state = cstate;\n          return chunk;\n        });\n      }\n    }, {\n      key: \"shiftBefore\",\n      value: function shiftBefore(pos) {\n        if (this.from >= pos || !this.chunks.length) return '';\n        var chunkShiftPos = pos - this.from;\n        var ci = 0;\n\n        while (ci < this.chunks.length) {\n          var chunk = this.chunks[ci];\n          var shiftChar = chunk.shiftBefore(chunkShiftPos);\n\n          if (chunk.toString()) {\n            // chunk still contains value\n            // but not shifted - means no more available chars to shift\n            if (!shiftChar) break;\n            ++ci;\n          } else {\n            // clean if chunk has no value\n            this.chunks.splice(ci, 1);\n          }\n\n          if (shiftChar) return shiftChar;\n        }\n\n        return '';\n      }\n    }]);\n\n    return ChunksTailDetails;\n  }();\n  /** Masking by RegExp */\n\n\n  var MaskedRegExp = /*#__PURE__*/function (_Masked) {\n    _inherits(MaskedRegExp, _Masked);\n\n    var _super = _createSuper(MaskedRegExp);\n\n    function MaskedRegExp() {\n      _classCallCheck(this, MaskedRegExp);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MaskedRegExp, [{\n      key: \"_update\",\n      value:\n      /**\n        @override\n        @param {Object} opts\n      */\n      function _update(opts) {\n        if (opts.mask) opts.validate = function (value) {\n          return value.search(opts.mask) >= 0;\n        };\n\n        _get(_getPrototypeOf(MaskedRegExp.prototype), \"_update\", this).call(this, opts);\n      }\n    }]);\n\n    return MaskedRegExp;\n  }(Masked);\n\n  IMask.MaskedRegExp = MaskedRegExp;\n  var _excluded$2 = [\"_blocks\"];\n  /**\n    Pattern mask\n    @param {Object} opts\n    @param {Object} opts.blocks\n    @param {Object} opts.definitions\n    @param {string} opts.placeholderChar\n    @param {boolean} opts.lazy\n  */\n\n  var MaskedPattern = /*#__PURE__*/function (_Masked) {\n    _inherits(MaskedPattern, _Masked);\n\n    var _super = _createSuper(MaskedPattern);\n    /** */\n\n    /** */\n\n    /** Single char for empty input */\n\n    /** Show placeholder only when needed */\n\n\n    function MaskedPattern() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, MaskedPattern); // TODO type $Shape<MaskedPatternOptions>={} does not work\n\n\n      opts.definitions = Object.assign({}, DEFAULT_INPUT_DEFINITIONS, opts.definitions);\n      return _super.call(this, Object.assign({}, MaskedPattern.DEFAULTS, opts));\n    }\n    /**\n      @override\n      @param {Object} opts\n    */\n\n\n    _createClass(MaskedPattern, [{\n      key: \"_update\",\n      value: function _update() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"_update\", this).call(this, opts);\n\n        this._rebuildMask();\n      }\n      /** */\n\n    }, {\n      key: \"_rebuildMask\",\n      value: function _rebuildMask() {\n        var _this = this;\n\n        var defs = this.definitions;\n        this._blocks = [];\n        this._stops = [];\n        this._maskedBlocks = {};\n        var pattern = this.mask;\n        if (!pattern || !defs) return;\n        var unmaskingBlock = false;\n        var optionalBlock = false;\n\n        for (var i = 0; i < pattern.length; ++i) {\n          if (this.blocks) {\n            var _ret = function () {\n              var p = pattern.slice(i);\n              var bNames = Object.keys(_this.blocks).filter(function (bName) {\n                return p.indexOf(bName) === 0;\n              }); // order by key length\n\n              bNames.sort(function (a, b) {\n                return b.length - a.length;\n              }); // use block name with max length\n\n              var bName = bNames[0];\n\n              if (bName) {\n                // $FlowFixMe no ideas\n                var maskedBlock = createMask(Object.assign({\n                  parent: _this,\n                  lazy: _this.lazy,\n                  placeholderChar: _this.placeholderChar,\n                  overwrite: _this.overwrite\n                }, _this.blocks[bName]));\n\n                if (maskedBlock) {\n                  _this._blocks.push(maskedBlock); // store block index\n\n\n                  if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];\n\n                  _this._maskedBlocks[bName].push(_this._blocks.length - 1);\n                }\n\n                i += bName.length - 1;\n                return \"continue\";\n              }\n            }();\n\n            if (_ret === \"continue\") continue;\n          }\n\n          var char = pattern[i];\n\n          var _isInput = (char in defs);\n\n          if (char === MaskedPattern.STOP_CHAR) {\n            this._stops.push(this._blocks.length);\n\n            continue;\n          }\n\n          if (char === '{' || char === '}') {\n            unmaskingBlock = !unmaskingBlock;\n            continue;\n          }\n\n          if (char === '[' || char === ']') {\n            optionalBlock = !optionalBlock;\n            continue;\n          }\n\n          if (char === MaskedPattern.ESCAPE_CHAR) {\n            ++i;\n            char = pattern[i];\n            if (!char) break;\n            _isInput = false;\n          }\n\n          var def = _isInput ? new PatternInputDefinition({\n            parent: this,\n            lazy: this.lazy,\n            placeholderChar: this.placeholderChar,\n            mask: defs[char],\n            isOptional: optionalBlock\n          }) : new PatternFixedDefinition({\n            char: char,\n            isUnmasking: unmaskingBlock\n          });\n\n          this._blocks.push(def);\n        }\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"state\",\n      get: function get() {\n        return Object.assign({}, _get(_getPrototypeOf(MaskedPattern.prototype), \"state\", this), {\n          _blocks: this._blocks.map(function (b) {\n            return b.state;\n          })\n        });\n      },\n      set: function set(state) {\n        var _blocks = state._blocks,\n            maskedState = _objectWithoutProperties(state, _excluded$2);\n\n        this._blocks.forEach(function (b, bi) {\n          return b.state = _blocks[bi];\n        });\n\n        _set(_getPrototypeOf(MaskedPattern.prototype), \"state\", maskedState, this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"reset\", this).call(this);\n\n        this._blocks.forEach(function (b) {\n          return b.reset();\n        });\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return this._blocks.every(function (b) {\n          return b.isComplete;\n        });\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        this._blocks.forEach(function (b) {\n          return b.doCommit();\n        });\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"doCommit\", this).call(this);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this._blocks.reduce(function (str, b) {\n          return str += b.unmaskedValue;\n        }, '');\n      },\n      set: function set(unmaskedValue) {\n        _set(_getPrototypeOf(MaskedPattern.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        // TODO return _value when not in change?\n        return this._blocks.reduce(function (str, b) {\n          return str += b.value;\n        }, '');\n      },\n      set: function set(value) {\n        _set(_getPrototypeOf(MaskedPattern.prototype), \"value\", value, this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"appendTail\",\n      value: function appendTail(tail) {\n        return _get(_getPrototypeOf(MaskedPattern.prototype), \"appendTail\", this).call(this, tail).aggregate(this._appendPlaceholder());\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var blockIter = this._mapPosToBlock(this.value.length);\n\n        var details = new ChangeDetails();\n        if (!blockIter) return details;\n\n        for (var bi = blockIter.index;; ++bi) {\n          var _block = this._blocks[bi];\n          if (!_block) break;\n\n          var blockDetails = _block._appendChar(ch, flags);\n\n          var skip = blockDetails.skip;\n          details.aggregate(blockDetails);\n          if (skip || blockDetails.rawInserted) break; // go next char\n        }\n\n        return details;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var _this2 = this;\n\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var chunkTail = new ChunksTailDetails();\n        if (fromPos === toPos) return chunkTail;\n\n        this._forEachBlocksInRange(fromPos, toPos, function (b, bi, bFromPos, bToPos) {\n          var blockChunk = b.extractTail(bFromPos, bToPos);\n          blockChunk.stop = _this2._findStopBefore(bi);\n          blockChunk.from = _this2._blockStartPos(bi);\n          if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\n          chunkTail.extend(blockChunk);\n        });\n\n        return chunkTail;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (fromPos === toPos) return '';\n        var input = '';\n\n        this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {\n          input += b.extractInput(fromPos, toPos, flags);\n        });\n\n        return input;\n      }\n    }, {\n      key: \"_findStopBefore\",\n      value: function _findStopBefore(blockIndex) {\n        var stopBefore;\n\n        for (var si = 0; si < this._stops.length; ++si) {\n          var stop = this._stops[si];\n          if (stop <= blockIndex) stopBefore = stop;else break;\n        }\n\n        return stopBefore;\n      }\n      /** Appends placeholder depending on laziness */\n\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder(toBlockIndex) {\n        var _this3 = this;\n\n        var details = new ChangeDetails();\n        if (this.lazy && toBlockIndex == null) return details;\n\n        var startBlockIter = this._mapPosToBlock(this.value.length);\n\n        if (!startBlockIter) return details;\n        var startBlockIndex = startBlockIter.index;\n        var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n\n        this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {\n          if (!b.lazy || toBlockIndex != null) {\n            // $FlowFixMe `_blocks` may not be present\n            var args = b._blocks != null ? [b._blocks.length] : [];\n\n            var bDetails = b._appendPlaceholder.apply(b, args);\n\n            _this3._value += bDetails.inserted;\n            details.aggregate(bDetails);\n          }\n        });\n\n        return details;\n      }\n      /** Finds block in pos */\n\n    }, {\n      key: \"_mapPosToBlock\",\n      value: function _mapPosToBlock(pos) {\n        var accVal = '';\n\n        for (var bi = 0; bi < this._blocks.length; ++bi) {\n          var _block2 = this._blocks[bi];\n          var blockStartPos = accVal.length;\n          accVal += _block2.value;\n\n          if (pos <= accVal.length) {\n            return {\n              index: bi,\n              offset: pos - blockStartPos\n            };\n          }\n        }\n      }\n      /** */\n\n    }, {\n      key: \"_blockStartPos\",\n      value: function _blockStartPos(blockIndex) {\n        return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {\n          return pos += b.value.length;\n        }, 0);\n      }\n      /** */\n\n    }, {\n      key: \"_forEachBlocksInRange\",\n      value: function _forEachBlocksInRange(fromPos) {\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var fn = arguments.length > 2 ? arguments[2] : undefined;\n\n        var fromBlockIter = this._mapPosToBlock(fromPos);\n\n        if (fromBlockIter) {\n          var toBlockIter = this._mapPosToBlock(toPos); // process first block\n\n\n          var isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n          var fromBlockStartPos = fromBlockIter.offset;\n          var fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].value.length;\n          fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n\n          if (toBlockIter && !isSameBlock) {\n            // process intermediate blocks\n            for (var bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\n              fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);\n            } // process last block\n\n\n            fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n          }\n        }\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        var removeDetails = _get(_getPrototypeOf(MaskedPattern.prototype), \"remove\", this).call(this, fromPos, toPos);\n\n        this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {\n          removeDetails.aggregate(b.remove(bFromPos, bToPos));\n        });\n\n        return removeDetails;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE; // TODO refactor - extract alignblock\n\n        var beginBlockData = this._mapPosToBlock(cursorPos) || {\n          index: 0,\n          offset: 0\n        };\n        var beginBlockOffset = beginBlockData.offset,\n            beginBlockIndex = beginBlockData.index;\n        var beginBlock = this._blocks[beginBlockIndex];\n        if (!beginBlock) return cursorPos;\n        var beginBlockCursorPos = beginBlockOffset; // if position inside block - try to adjust it\n\n        if (beginBlockCursorPos !== 0 && beginBlockCursorPos < beginBlock.value.length) {\n          beginBlockCursorPos = beginBlock.nearestInputPos(beginBlockOffset, forceDirection(direction));\n        }\n\n        var cursorAtRight = beginBlockCursorPos === beginBlock.value.length;\n        var cursorAtLeft = beginBlockCursorPos === 0; //  cursor is INSIDE first block (not at bounds)\n\n        if (!cursorAtLeft && !cursorAtRight) return this._blockStartPos(beginBlockIndex) + beginBlockCursorPos;\n        var searchBlockIndex = cursorAtRight ? beginBlockIndex + 1 : beginBlockIndex;\n\n        if (direction === DIRECTION.NONE) {\n          // NONE direction used to calculate start input position if no chars were removed\n          // FOR NONE:\n          // -\n          // input|any\n          // ->\n          //  any|input\n          // <-\n          //  filled-input|any\n          // check if first block at left is input\n          if (searchBlockIndex > 0) {\n            var blockIndexAtLeft = searchBlockIndex - 1;\n            var blockAtLeft = this._blocks[blockIndexAtLeft];\n            var blockInputPos = blockAtLeft.nearestInputPos(0, DIRECTION.NONE); // is input\n\n            if (!blockAtLeft.value.length || blockInputPos !== blockAtLeft.value.length) {\n              return this._blockStartPos(searchBlockIndex);\n            }\n          } // ->\n\n\n          var firstInputAtRight = searchBlockIndex;\n\n          for (var bi = firstInputAtRight; bi < this._blocks.length; ++bi) {\n            var blockAtRight = this._blocks[bi];\n\n            var _blockInputPos = blockAtRight.nearestInputPos(0, DIRECTION.NONE);\n\n            if (!blockAtRight.value.length || _blockInputPos !== blockAtRight.value.length) {\n              return this._blockStartPos(bi) + _blockInputPos;\n            }\n          } // <-\n          // find first non-fixed symbol\n\n\n          for (var _bi = searchBlockIndex - 1; _bi >= 0; --_bi) {\n            var _block3 = this._blocks[_bi];\n\n            var _blockInputPos2 = _block3.nearestInputPos(0, DIRECTION.NONE); // is input\n\n\n            if (!_block3.value.length || _blockInputPos2 !== _block3.value.length) {\n              return this._blockStartPos(_bi) + _block3.value.length;\n            }\n          }\n\n          return cursorPos;\n        }\n\n        if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n          // -\n          //  any|filled-input\n          // <-\n          //  any|first not empty is not-len-aligned\n          //  not-0-aligned|any\n          // ->\n          //  any|not-len-aligned or end\n          // check if first block at right is filled input\n          var firstFilledBlockIndexAtRight;\n\n          for (var _bi2 = searchBlockIndex; _bi2 < this._blocks.length; ++_bi2) {\n            if (this._blocks[_bi2].value) {\n              firstFilledBlockIndexAtRight = _bi2;\n              break;\n            }\n          }\n\n          if (firstFilledBlockIndexAtRight != null) {\n            var filledBlock = this._blocks[firstFilledBlockIndexAtRight];\n\n            var _blockInputPos3 = filledBlock.nearestInputPos(0, DIRECTION.RIGHT);\n\n            if (_blockInputPos3 === 0 && filledBlock.unmaskedValue.length) {\n              // filled block is input\n              return this._blockStartPos(firstFilledBlockIndexAtRight) + _blockInputPos3;\n            }\n          } // <-\n          // find this vars\n\n\n          var firstFilledInputBlockIndex = -1;\n          var firstEmptyInputBlockIndex; // TODO consider nested empty inputs\n\n          for (var _bi3 = searchBlockIndex - 1; _bi3 >= 0; --_bi3) {\n            var _block4 = this._blocks[_bi3];\n\n            var _blockInputPos4 = _block4.nearestInputPos(_block4.value.length, DIRECTION.FORCE_LEFT);\n\n            if (!_block4.value || _blockInputPos4 !== 0) firstEmptyInputBlockIndex = _bi3;\n\n            if (_blockInputPos4 !== 0) {\n              if (_blockInputPos4 !== _block4.value.length) {\n                // aligned inside block - return immediately\n                return this._blockStartPos(_bi3) + _blockInputPos4;\n              } else {\n                // found filled\n                firstFilledInputBlockIndex = _bi3;\n                break;\n              }\n            }\n          }\n\n          if (direction === DIRECTION.LEFT) {\n            // try find first empty input before start searching position only when not forced\n            for (var _bi4 = firstFilledInputBlockIndex + 1; _bi4 <= Math.min(searchBlockIndex, this._blocks.length - 1); ++_bi4) {\n              var _block5 = this._blocks[_bi4];\n\n              var _blockInputPos5 = _block5.nearestInputPos(0, DIRECTION.NONE);\n\n              var blockAlignedPos = this._blockStartPos(_bi4) + _blockInputPos5;\n\n              if (blockAlignedPos > cursorPos) break; // if block is not lazy input\n\n              if (_blockInputPos5 !== _block5.value.length) return blockAlignedPos;\n            }\n          } // process overflow\n\n\n          if (firstFilledInputBlockIndex >= 0) {\n            return this._blockStartPos(firstFilledInputBlockIndex) + this._blocks[firstFilledInputBlockIndex].value.length;\n          } // for lazy if has aligned left inside fixed and has came to the start - use start position\n\n\n          if (direction === DIRECTION.FORCE_LEFT || this.lazy && !this.extractInput() && !isInput(this._blocks[searchBlockIndex])) {\n            return 0;\n          }\n\n          if (firstEmptyInputBlockIndex != null) {\n            return this._blockStartPos(firstEmptyInputBlockIndex);\n          } // find first input\n\n\n          for (var _bi5 = searchBlockIndex; _bi5 < this._blocks.length; ++_bi5) {\n            var _block6 = this._blocks[_bi5];\n\n            var _blockInputPos6 = _block6.nearestInputPos(0, DIRECTION.NONE); // is input\n\n\n            if (!_block6.value.length || _blockInputPos6 !== _block6.value.length) {\n              return this._blockStartPos(_bi5) + _blockInputPos6;\n            }\n          }\n\n          return 0;\n        }\n\n        if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n          // ->\n          //  any|not-len-aligned and filled\n          //  any|not-len-aligned\n          // <-\n          //  not-0-aligned or start|any\n          var firstInputBlockAlignedIndex;\n          var firstInputBlockAlignedPos;\n\n          for (var _bi6 = searchBlockIndex; _bi6 < this._blocks.length; ++_bi6) {\n            var _block7 = this._blocks[_bi6];\n\n            var _blockInputPos7 = _block7.nearestInputPos(0, DIRECTION.NONE);\n\n            if (_blockInputPos7 !== _block7.value.length) {\n              firstInputBlockAlignedPos = this._blockStartPos(_bi6) + _blockInputPos7;\n              firstInputBlockAlignedIndex = _bi6;\n              break;\n            }\n          }\n\n          if (firstInputBlockAlignedIndex != null && firstInputBlockAlignedPos != null) {\n            for (var _bi7 = firstInputBlockAlignedIndex; _bi7 < this._blocks.length; ++_bi7) {\n              var _block8 = this._blocks[_bi7];\n\n              var _blockInputPos8 = _block8.nearestInputPos(0, DIRECTION.FORCE_RIGHT);\n\n              if (_blockInputPos8 !== _block8.value.length) {\n                return this._blockStartPos(_bi7) + _blockInputPos8;\n              }\n            }\n\n            return direction === DIRECTION.FORCE_RIGHT ? this.value.length : firstInputBlockAlignedPos;\n          }\n\n          for (var _bi8 = Math.min(searchBlockIndex, this._blocks.length - 1); _bi8 >= 0; --_bi8) {\n            var _block9 = this._blocks[_bi8];\n\n            var _blockInputPos9 = _block9.nearestInputPos(_block9.value.length, DIRECTION.LEFT);\n\n            if (_blockInputPos9 !== 0) {\n              var alignedPos = this._blockStartPos(_bi8) + _blockInputPos9;\n\n              if (alignedPos >= cursorPos) return alignedPos;\n              break;\n            }\n          }\n        }\n\n        return cursorPos;\n      }\n      /** Get block by name */\n\n    }, {\n      key: \"maskedBlock\",\n      value: function maskedBlock(name) {\n        return this.maskedBlocks(name)[0];\n      }\n      /** Get all blocks by name */\n\n    }, {\n      key: \"maskedBlocks\",\n      value: function maskedBlocks(name) {\n        var _this4 = this;\n\n        var indices = this._maskedBlocks[name];\n        if (!indices) return [];\n        return indices.map(function (gi) {\n          return _this4._blocks[gi];\n        });\n      }\n    }]);\n\n    return MaskedPattern;\n  }(Masked);\n\n  MaskedPattern.DEFAULTS = {\n    lazy: true,\n    placeholderChar: '_'\n  };\n  MaskedPattern.STOP_CHAR = '`';\n  MaskedPattern.ESCAPE_CHAR = '\\\\';\n  MaskedPattern.InputDefinition = PatternInputDefinition;\n  MaskedPattern.FixedDefinition = PatternFixedDefinition;\n\n  function isInput(block) {\n    if (!block) return false;\n    var value = block.value;\n    return !value || block.nearestInputPos(0, DIRECTION.NONE) !== value.length;\n  }\n\n  IMask.MaskedPattern = MaskedPattern;\n  /** Pattern which accepts ranges */\n\n  var MaskedRange = /*#__PURE__*/function (_MaskedPattern) {\n    _inherits(MaskedRange, _MaskedPattern);\n\n    var _super = _createSuper(MaskedRange);\n\n    function MaskedRange() {\n      _classCallCheck(this, MaskedRange);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MaskedRange, [{\n      key: \"_matchFrom\",\n      get:\n      /**\n        Optionally sets max length of pattern.\n        Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n      */\n\n      /** Min bound */\n\n      /** Max bound */\n\n      /** */\n      function get() {\n        return this.maxLength - String(this.from).length;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"_update\",\n      value: function _update(opts) {\n        // TODO type\n        opts = Object.assign({\n          to: this.to || 0,\n          from: this.from || 0\n        }, opts);\n        var maxLength = String(opts.to).length;\n        if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\n        opts.maxLength = maxLength;\n        var fromStr = String(opts.from).padStart(maxLength, '0');\n        var toStr = String(opts.to).padStart(maxLength, '0');\n        var sameCharsCount = 0;\n\n        while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {\n          ++sameCharsCount;\n        }\n\n        opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(maxLength - sameCharsCount);\n\n        _get(_getPrototypeOf(MaskedRange.prototype), \"_update\", this).call(this, opts);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return _get(_getPrototypeOf(MaskedRange.prototype), \"isComplete\", this) && Boolean(this.value);\n      }\n    }, {\n      key: \"boundaries\",\n      value: function boundaries(str) {\n        var minstr = '';\n        var maxstr = '';\n\n        var _ref = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\n            _ref2 = _slicedToArray(_ref, 3),\n            placeholder = _ref2[1],\n            num = _ref2[2];\n\n        if (num) {\n          minstr = '0'.repeat(placeholder.length) + num;\n          maxstr = '9'.repeat(placeholder.length) + num;\n        }\n\n        minstr = minstr.padEnd(this.maxLength, '0');\n        maxstr = maxstr.padEnd(this.maxLength, '9');\n        return [minstr, maxstr];\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doPrepare\",\n      value: function doPrepare(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        str = _get(_getPrototypeOf(MaskedRange.prototype), \"doPrepare\", this).call(this, str, flags).replace(/\\D/g, '');\n        if (!this.autofix) return str;\n        var fromStr = String(this.from).padStart(this.maxLength, '0');\n        var toStr = String(this.to).padStart(this.maxLength, '0');\n        var val = this.value;\n        var prepStr = '';\n\n        for (var ci = 0; ci < str.length; ++ci) {\n          var nextVal = val + prepStr + str[ci];\n\n          var _this$boundaries = this.boundaries(nextVal),\n              _this$boundaries2 = _slicedToArray(_this$boundaries, 2),\n              minstr = _this$boundaries2[0],\n              maxstr = _this$boundaries2[1];\n\n          if (Number(maxstr) < this.from) prepStr += fromStr[nextVal.length - 1];else if (Number(minstr) > this.to) prepStr += toStr[nextVal.length - 1];else prepStr += str[ci];\n        }\n\n        return prepStr;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _get2;\n\n        var str = this.value;\n        var firstNonZero = str.search(/[^0]/);\n        if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n\n        var _this$boundaries3 = this.boundaries(str),\n            _this$boundaries4 = _slicedToArray(_this$boundaries3, 2),\n            minstr = _this$boundaries4[0],\n            maxstr = _this$boundaries4[1];\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = _get(_getPrototypeOf(MaskedRange.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\n      }\n    }]);\n\n    return MaskedRange;\n  }(MaskedPattern);\n\n  IMask.MaskedRange = MaskedRange;\n  /** Date mask */\n\n  var MaskedDate = /*#__PURE__*/function (_MaskedPattern) {\n    _inherits(MaskedDate, _MaskedPattern);\n\n    var _super = _createSuper(MaskedDate);\n    /** Pattern mask for date according to {@link MaskedDate#format} */\n\n    /** Start date */\n\n    /** End date */\n\n    /** */\n\n    /**\n      @param {Object} opts\n    */\n\n\n    function MaskedDate(opts) {\n      _classCallCheck(this, MaskedDate);\n\n      return _super.call(this, Object.assign({}, MaskedDate.DEFAULTS, opts));\n    }\n    /**\n      @override\n    */\n\n\n    _createClass(MaskedDate, [{\n      key: \"_update\",\n      value: function _update(opts) {\n        if (opts.mask === Date) delete opts.mask;\n        if (opts.pattern) opts.mask = opts.pattern;\n        var blocks = opts.blocks;\n        opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block\n\n        if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\n        if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\n\n        if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {\n          opts.blocks.m.from = opts.min.getMonth() + 1;\n          opts.blocks.m.to = opts.max.getMonth() + 1;\n\n          if (opts.blocks.m.from === opts.blocks.m.to) {\n            opts.blocks.d.from = opts.min.getDate();\n            opts.blocks.d.to = opts.max.getDate();\n          }\n        }\n\n        Object.assign(opts.blocks, blocks); // add autofix\n\n        Object.keys(opts.blocks).forEach(function (bk) {\n          var b = opts.blocks[bk];\n          if (!('autofix' in b)) b.autofix = opts.autofix;\n        });\n\n        _get(_getPrototypeOf(MaskedDate.prototype), \"_update\", this).call(this, opts);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _get2;\n\n        var date = this.date;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(MaskedDate.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n      }\n      /** Checks if date is exists */\n\n    }, {\n      key: \"isDateExist\",\n      value: function isDateExist(str) {\n        return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n      }\n      /** Parsed Date */\n\n    }, {\n      key: \"date\",\n      get: function get() {\n        return this.typedValue;\n      },\n      set: function set(date) {\n        this.typedValue = date;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return this.isComplete ? _get(_getPrototypeOf(MaskedDate.prototype), \"typedValue\", this) : null;\n      },\n      set: function set(value) {\n        _set(_getPrototypeOf(MaskedDate.prototype), \"typedValue\", value, this, true);\n      }\n    }]);\n\n    return MaskedDate;\n  }(MaskedPattern);\n\n  MaskedDate.DEFAULTS = {\n    pattern: 'd{.}`m{.}`Y',\n    format: function format(date) {\n      var day = String(date.getDate()).padStart(2, '0');\n      var month = String(date.getMonth() + 1).padStart(2, '0');\n      var year = date.getFullYear();\n      return [day, month, year].join('.');\n    },\n    parse: function parse(str) {\n      var _str$split = str.split('.'),\n          _str$split2 = _slicedToArray(_str$split, 3),\n          day = _str$split2[0],\n          month = _str$split2[1],\n          year = _str$split2[2];\n\n      return new Date(year, month - 1, day);\n    }\n  };\n\n  MaskedDate.GET_DEFAULT_BLOCKS = function () {\n    return {\n      d: {\n        mask: MaskedRange,\n        from: 1,\n        to: 31,\n        maxLength: 2\n      },\n      m: {\n        mask: MaskedRange,\n        from: 1,\n        to: 12,\n        maxLength: 2\n      },\n      Y: {\n        mask: MaskedRange,\n        from: 1900,\n        to: 9999\n      }\n    };\n  };\n\n  IMask.MaskedDate = MaskedDate;\n  /**\n    Generic element API to use with mask\n    @interface\n  */\n\n  var MaskElement = /*#__PURE__*/function () {\n    function MaskElement() {\n      _classCallCheck(this, MaskElement);\n    }\n\n    _createClass(MaskElement, [{\n      key: \"selectionStart\",\n      get:\n      /** */\n\n      /** */\n\n      /** */\n\n      /** Safely returns selection start */\n      function get() {\n        var start;\n\n        try {\n          start = this._unsafeSelectionStart;\n        } catch (e) {}\n\n        return start != null ? start : this.value.length;\n      }\n      /** Safely returns selection end */\n\n    }, {\n      key: \"selectionEnd\",\n      get: function get() {\n        var end;\n\n        try {\n          end = this._unsafeSelectionEnd;\n        } catch (e) {}\n\n        return end != null ? end : this.value.length;\n      }\n      /** Safely sets element selection */\n\n    }, {\n      key: \"select\",\n      value: function select(start, end) {\n        if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n\n        try {\n          this._unsafeSelect(start, end);\n        } catch (e) {}\n      }\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"_unsafeSelect\",\n      value: function _unsafeSelect(start, end) {}\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"isActive\",\n      get: function get() {\n        return false;\n      }\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"bindEvents\",\n      value: function bindEvents(handlers) {}\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {}\n    }]);\n\n    return MaskElement;\n  }();\n\n  IMask.MaskElement = MaskElement;\n  /** Bridge between HTMLElement and {@link Masked} */\n\n  var HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\n    _inherits(HTMLMaskElement, _MaskElement);\n\n    var _super = _createSuper(HTMLMaskElement);\n    /** Mapping between HTMLElement events and mask internal events */\n\n    /** HTMLElement to use mask on */\n\n    /**\n      @param {HTMLInputElement|HTMLTextAreaElement} input\n    */\n\n\n    function HTMLMaskElement(input) {\n      var _this;\n\n      _classCallCheck(this, HTMLMaskElement);\n\n      _this = _super.call(this);\n      _this.input = input;\n      _this._handlers = {};\n      return _this;\n    }\n    /** */\n    // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n    _createClass(HTMLMaskElement, [{\n      key: \"rootElement\",\n      get: function get() {\n        return this.input.getRootNode ? this.input.getRootNode() : document;\n      }\n      /**\n        Is element in focus\n        @readonly\n      */\n\n    }, {\n      key: \"isActive\",\n      get: function get() {\n        //$FlowFixMe\n        return this.input === this.rootElement.activeElement;\n      }\n      /**\n        Returns HTMLElement selection start\n        @override\n      */\n\n    }, {\n      key: \"_unsafeSelectionStart\",\n      get: function get() {\n        return this.input.selectionStart;\n      }\n      /**\n        Returns HTMLElement selection end\n        @override\n      */\n\n    }, {\n      key: \"_unsafeSelectionEnd\",\n      get: function get() {\n        return this.input.selectionEnd;\n      }\n      /**\n        Sets HTMLElement selection\n        @override\n      */\n\n    }, {\n      key: \"_unsafeSelect\",\n      value: function _unsafeSelect(start, end) {\n        this.input.setSelectionRange(start, end);\n      }\n      /**\n        HTMLElement value\n        @override\n      */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.input.value;\n      },\n      set: function set(value) {\n        this.input.value = value;\n      }\n      /**\n        Binds HTMLElement events to mask internal events\n        @override\n      */\n\n    }, {\n      key: \"bindEvents\",\n      value: function bindEvents(handlers) {\n        var _this2 = this;\n\n        Object.keys(handlers).forEach(function (event) {\n          return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n        });\n      }\n      /**\n        Unbinds HTMLElement events to mask internal events\n        @override\n      */\n\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {\n        var _this3 = this;\n\n        Object.keys(this._handlers).forEach(function (event) {\n          return _this3._toggleEventHandler(event);\n        });\n      }\n      /** */\n\n    }, {\n      key: \"_toggleEventHandler\",\n      value: function _toggleEventHandler(event, handler) {\n        if (this._handlers[event]) {\n          this.input.removeEventListener(event, this._handlers[event]);\n          delete this._handlers[event];\n        }\n\n        if (handler) {\n          this.input.addEventListener(event, handler);\n          this._handlers[event] = handler;\n        }\n      }\n    }]);\n\n    return HTMLMaskElement;\n  }(MaskElement);\n\n  HTMLMaskElement.EVENTS_MAP = {\n    selectionChange: 'keydown',\n    input: 'input',\n    drop: 'drop',\n    click: 'click',\n    focus: 'focus',\n    commit: 'blur'\n  };\n  IMask.HTMLMaskElement = HTMLMaskElement;\n\n  var HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {\n    _inherits(HTMLContenteditableMaskElement, _HTMLMaskElement);\n\n    var _super = _createSuper(HTMLContenteditableMaskElement);\n\n    function HTMLContenteditableMaskElement() {\n      _classCallCheck(this, HTMLContenteditableMaskElement);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(HTMLContenteditableMaskElement, [{\n      key: \"_unsafeSelectionStart\",\n      get:\n      /**\n        Returns HTMLElement selection start\n        @override\n      */\n      function get() {\n        var root = this.rootElement;\n        var selection = root.getSelection && root.getSelection();\n        return selection && selection.anchorOffset;\n      }\n      /**\n        Returns HTMLElement selection end\n        @override\n      */\n\n    }, {\n      key: \"_unsafeSelectionEnd\",\n      get: function get() {\n        var root = this.rootElement;\n        var selection = root.getSelection && root.getSelection();\n        return selection && this._unsafeSelectionStart + String(selection).length;\n      }\n      /**\n        Sets HTMLElement selection\n        @override\n      */\n\n    }, {\n      key: \"_unsafeSelect\",\n      value: function _unsafeSelect(start, end) {\n        if (!this.rootElement.createRange) return;\n        var range = this.rootElement.createRange();\n        range.setStart(this.input.firstChild || this.input, start);\n        range.setEnd(this.input.lastChild || this.input, end);\n        var root = this.rootElement;\n        var selection = root.getSelection && root.getSelection();\n\n        if (selection) {\n          selection.removeAllRanges();\n          selection.addRange(range);\n        }\n      }\n      /**\n        HTMLElement value\n        @override\n      */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        // $FlowFixMe\n        return this.input.textContent;\n      },\n      set: function set(value) {\n        this.input.textContent = value;\n      }\n    }]);\n\n    return HTMLContenteditableMaskElement;\n  }(HTMLMaskElement);\n\n  IMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n  var _excluded$1 = [\"mask\"];\n  /** Listens to element events and controls changes between element and {@link Masked} */\n\n  var InputMask = /*#__PURE__*/function () {\n    /**\n      View element\n      @readonly\n    */\n\n    /**\n      Internal {@link Masked} model\n      @readonly\n    */\n\n    /**\n      @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\n      @param {Object} opts\n    */\n    function InputMask(el, opts) {\n      _classCallCheck(this, InputMask);\n\n      this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLMaskElement(el);\n      this.masked = createMask(opts);\n      this._listeners = {};\n      this._value = '';\n      this._unmaskedValue = '';\n      this._saveSelection = this._saveSelection.bind(this);\n      this._onInput = this._onInput.bind(this);\n      this._onChange = this._onChange.bind(this);\n      this._onDrop = this._onDrop.bind(this);\n      this._onFocus = this._onFocus.bind(this);\n      this._onClick = this._onClick.bind(this);\n      this.alignCursor = this.alignCursor.bind(this);\n      this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n      this._bindEvents(); // refresh\n\n\n      this.updateValue();\n\n      this._onChange();\n    }\n    /** Read or update mask */\n\n\n    _createClass(InputMask, [{\n      key: \"mask\",\n      get: function get() {\n        return this.masked.mask;\n      },\n      set: function set(mask) {\n        if (this.maskEquals(mask)) return;\n\n        if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n          this.masked.updateOptions({\n            mask: mask\n          });\n          return;\n        }\n\n        var masked = createMask({\n          mask: mask\n        });\n        masked.unmaskedValue = this.masked.unmaskedValue;\n        this.masked = masked;\n      }\n      /** Raw value */\n\n    }, {\n      key: \"maskEquals\",\n      value: function maskEquals(mask) {\n        return mask == null || mask === this.masked.mask || mask === Date && this.masked instanceof MaskedDate;\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(str) {\n        this.masked.value = str;\n        this.updateControl();\n        this.alignCursor();\n      }\n      /** Unmasked value */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this._unmaskedValue;\n      },\n      set: function set(str) {\n        this.masked.unmaskedValue = str;\n        this.updateControl();\n        this.alignCursor();\n      }\n      /** Typed unmasked value */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return this.masked.typedValue;\n      },\n      set: function set(val) {\n        this.masked.typedValue = val;\n        this.updateControl();\n        this.alignCursor();\n      }\n      /**\n        Starts listening to element events\n        @protected\n      */\n\n    }, {\n      key: \"_bindEvents\",\n      value: function _bindEvents() {\n        this.el.bindEvents({\n          selectionChange: this._saveSelection,\n          input: this._onInput,\n          drop: this._onDrop,\n          click: this._onClick,\n          focus: this._onFocus,\n          commit: this._onChange\n        });\n      }\n      /**\n        Stops listening to element events\n        @protected\n       */\n\n    }, {\n      key: \"_unbindEvents\",\n      value: function _unbindEvents() {\n        if (this.el) this.el.unbindEvents();\n      }\n      /**\n        Fires custom event\n        @protected\n       */\n\n    }, {\n      key: \"_fireEvent\",\n      value: function _fireEvent(ev) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var listeners = this._listeners[ev];\n        if (!listeners) return;\n        listeners.forEach(function (l) {\n          return l.apply(void 0, args);\n        });\n      }\n      /**\n        Current selection start\n        @readonly\n      */\n\n    }, {\n      key: \"selectionStart\",\n      get: function get() {\n        return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n      }\n      /** Current cursor position */\n\n    }, {\n      key: \"cursorPos\",\n      get: function get() {\n        return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n      },\n      set: function set(pos) {\n        if (!this.el || !this.el.isActive) return;\n        this.el.select(pos, pos);\n\n        this._saveSelection();\n      }\n      /**\n        Stores current selection\n        @protected\n      */\n\n    }, {\n      key: \"_saveSelection\",\n      value: function _saveSelection() {\n        if (this.value !== this.el.value) {\n          console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n        }\n\n        this._selection = {\n          start: this.selectionStart,\n          end: this.cursorPos\n        };\n      }\n      /** Syncronizes model value from view */\n\n    }, {\n      key: \"updateValue\",\n      value: function updateValue() {\n        this.masked.value = this.el.value;\n        this._value = this.masked.value;\n      }\n      /** Syncronizes view from model value, fires change events */\n\n    }, {\n      key: \"updateControl\",\n      value: function updateControl() {\n        var newUnmaskedValue = this.masked.unmaskedValue;\n        var newValue = this.masked.value;\n        var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n        this._unmaskedValue = newUnmaskedValue;\n        this._value = newValue;\n        if (this.el.value !== newValue) this.el.value = newValue;\n        if (isChanged) this._fireChangeEvents();\n      }\n      /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n\n    }, {\n      key: \"updateOptions\",\n      value: function updateOptions(opts) {\n        var mask = opts.mask,\n            restOpts = _objectWithoutProperties(opts, _excluded$1);\n\n        var updateMask = !this.maskEquals(mask);\n        var updateOpts = !objectIncludes(this.masked, restOpts);\n        if (updateMask) this.mask = mask;\n        if (updateOpts) this.masked.updateOptions(restOpts);\n        if (updateMask || updateOpts) this.updateControl();\n      }\n      /** Updates cursor */\n\n    }, {\n      key: \"updateCursor\",\n      value: function updateCursor(cursorPos) {\n        if (cursorPos == null) return;\n        this.cursorPos = cursorPos; // also queue change cursor for mobile browsers\n\n        this._delayUpdateCursor(cursorPos);\n      }\n      /**\n        Delays cursor update to support mobile browsers\n        @private\n      */\n\n    }, {\n      key: \"_delayUpdateCursor\",\n      value: function _delayUpdateCursor(cursorPos) {\n        var _this = this;\n\n        this._abortUpdateCursor();\n\n        this._changingCursorPos = cursorPos;\n        this._cursorChanging = setTimeout(function () {\n          if (!_this.el) return; // if was destroyed\n\n          _this.cursorPos = _this._changingCursorPos;\n\n          _this._abortUpdateCursor();\n        }, 10);\n      }\n      /**\n        Fires custom events\n        @protected\n      */\n\n    }, {\n      key: \"_fireChangeEvents\",\n      value: function _fireChangeEvents() {\n        this._fireEvent('accept', this._inputEvent);\n\n        if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n      }\n      /**\n        Aborts delayed cursor update\n        @private\n      */\n\n    }, {\n      key: \"_abortUpdateCursor\",\n      value: function _abortUpdateCursor() {\n        if (this._cursorChanging) {\n          clearTimeout(this._cursorChanging);\n          delete this._cursorChanging;\n        }\n      }\n      /** Aligns cursor to nearest available position */\n\n    }, {\n      key: \"alignCursor\",\n      value: function alignCursor() {\n        this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\n      }\n      /** Aligns cursor only if selection is empty */\n\n    }, {\n      key: \"alignCursorFriendly\",\n      value: function alignCursorFriendly() {\n        if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n\n        this.alignCursor();\n      }\n      /** Adds listener on custom event */\n\n    }, {\n      key: \"on\",\n      value: function on(ev, handler) {\n        if (!this._listeners[ev]) this._listeners[ev] = [];\n\n        this._listeners[ev].push(handler);\n\n        return this;\n      }\n      /** Removes custom event listener */\n\n    }, {\n      key: \"off\",\n      value: function off(ev, handler) {\n        if (!this._listeners[ev]) return this;\n\n        if (!handler) {\n          delete this._listeners[ev];\n          return this;\n        }\n\n        var hIndex = this._listeners[ev].indexOf(handler);\n\n        if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n        return this;\n      }\n      /** Handles view input event */\n\n    }, {\n      key: \"_onInput\",\n      value: function _onInput(e) {\n        this._inputEvent = e;\n\n        this._abortUpdateCursor(); // fix strange IE behavior\n\n\n        if (!this._selection) return this.updateValue();\n        var details = new ActionDetails( // new state\n        this.el.value, this.cursorPos, // old state\n        this.value, this._selection);\n        var oldRawValue = this.masked.rawInputValue;\n        var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset; // force align in remove direction only if no input chars were removed\n        // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n\n        var removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n        var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n        this.updateControl();\n        this.updateCursor(cursorPos);\n        delete this._inputEvent;\n      }\n      /** Handles view change event and commits model value */\n\n    }, {\n      key: \"_onChange\",\n      value: function _onChange() {\n        if (this.value !== this.el.value) {\n          this.updateValue();\n        }\n\n        this.masked.doCommit();\n        this.updateControl();\n\n        this._saveSelection();\n      }\n      /** Handles view drop event, prevents by default */\n\n    }, {\n      key: \"_onDrop\",\n      value: function _onDrop(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n      /** Restore last selection on focus */\n\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus(ev) {\n        this.alignCursorFriendly();\n      }\n      /** Restore last selection on focus */\n\n    }, {\n      key: \"_onClick\",\n      value: function _onClick(ev) {\n        this.alignCursorFriendly();\n      }\n      /** Unbind view events and removes element reference */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this._unbindEvents(); // $FlowFixMe why not do so?\n\n\n        this._listeners.length = 0; // $FlowFixMe\n\n        delete this.el;\n      }\n    }]);\n\n    return InputMask;\n  }();\n\n  IMask.InputMask = InputMask;\n  /** Pattern which validates enum values */\n\n  var MaskedEnum = /*#__PURE__*/function (_MaskedPattern) {\n    _inherits(MaskedEnum, _MaskedPattern);\n\n    var _super = _createSuper(MaskedEnum);\n\n    function MaskedEnum() {\n      _classCallCheck(this, MaskedEnum);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MaskedEnum, [{\n      key: \"_update\",\n      value:\n      /**\n        @override\n        @param {Object} opts\n      */\n      function _update(opts) {\n        // TODO type\n        if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);\n\n        _get(_getPrototypeOf(MaskedEnum.prototype), \"_update\", this).call(this, opts);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _this = this,\n            _get2;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return this.enum.some(function (e) {\n          return e.indexOf(_this.unmaskedValue) >= 0;\n        }) && (_get2 = _get(_getPrototypeOf(MaskedEnum.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\n      }\n    }]);\n\n    return MaskedEnum;\n  }(MaskedPattern);\n\n  IMask.MaskedEnum = MaskedEnum;\n  /**\n    Number mask\n    @param {Object} opts\n    @param {string} opts.radix - Single char\n    @param {string} opts.thousandsSeparator - Single char\n    @param {Array<string>} opts.mapToRadix - Array of single chars\n    @param {number} opts.min\n    @param {number} opts.max\n    @param {number} opts.scale - Digits after point\n    @param {boolean} opts.signed - Allow negative\n    @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n    @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n  */\n\n  var MaskedNumber = /*#__PURE__*/function (_Masked) {\n    _inherits(MaskedNumber, _Masked);\n\n    var _super = _createSuper(MaskedNumber);\n    /** Single char */\n\n    /** Single char */\n\n    /** Array of single chars */\n\n    /** */\n\n    /** */\n\n    /** Digits after point */\n\n    /** */\n\n    /** Flag to remove leading and trailing zeros in the end of editing */\n\n    /** Flag to pad trailing zeros after point in the end of editing */\n\n\n    function MaskedNumber(opts) {\n      _classCallCheck(this, MaskedNumber);\n\n      return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n    }\n    /**\n      @override\n    */\n\n\n    _createClass(MaskedNumber, [{\n      key: \"_update\",\n      value: function _update(opts) {\n        _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n        this._updateRegExps();\n      }\n      /** */\n\n    }, {\n      key: \"_updateRegExps\",\n      value: function _updateRegExps() {\n        // use different regexp to process user input (more strict, input suffix) and tail shifting\n        var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n        var midInput = '(0|([1-9]+\\\\d*))?';\n        var mid = '\\\\d*';\n        var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n        this._numberRegExpInput = new RegExp(start + midInput + end);\n        this._numberRegExp = new RegExp(start + mid + end);\n        this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n        this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n      }\n      /** */\n\n    }, {\n      key: \"_removeThousandsSeparators\",\n      value: function _removeThousandsSeparators(value) {\n        return value.replace(this._thousandsSeparatorRegExp, '');\n      }\n      /** */\n\n    }, {\n      key: \"_insertThousandsSeparators\",\n      value: function _insertThousandsSeparators(value) {\n        // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n        var parts = value.split(this.radix);\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n        return parts.join(this.radix);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doPrepare\",\n      value: function doPrepare(str) {\n        var _get2;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(args));\n      }\n      /** */\n\n    }, {\n      key: \"_separatorsCount\",\n      value: function _separatorsCount(to) {\n        var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var count = 0;\n\n        for (var pos = 0; pos < to; ++pos) {\n          if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n            ++count;\n            if (extendOnSeparators) to += this.thousandsSeparator.length;\n          }\n        }\n\n        return count;\n      }\n      /** */\n\n    }, {\n      key: \"_separatorsCountFromSlice\",\n      value: function _separatorsCountFromSlice() {\n        var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n        return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n        var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n        var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n\n        fromPos = _this$_adjustRangeWit2[0];\n        toPos = _this$_adjustRangeWit2[1];\n        return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n        var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n        var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n        this._value = this._removeThousandsSeparators(this.value);\n\n        var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n        this._value = this._insertThousandsSeparators(this._value);\n        var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n        var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n        appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n        appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n        return appendDetails;\n      }\n      /** */\n\n    }, {\n      key: \"_findSeparatorAround\",\n      value: function _findSeparatorAround(pos) {\n        if (this.thousandsSeparator) {\n          var searchFrom = pos - this.thousandsSeparator.length + 1;\n          var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n          if (separatorPos <= pos) return separatorPos;\n        }\n\n        return -1;\n      }\n    }, {\n      key: \"_adjustRangeWithSeparators\",\n      value: function _adjustRangeWithSeparators(from, to) {\n        var separatorAroundFromPos = this._findSeparatorAround(from);\n\n        if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n        var separatorAroundToPos = this._findSeparatorAround(to);\n\n        if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n        return [from, to];\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n        var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n\n        fromPos = _this$_adjustRangeWit4[0];\n        toPos = _this$_adjustRangeWit4[1];\n        var valueBeforePos = this.value.slice(0, fromPos);\n        var valueAfterPos = this.value.slice(toPos);\n\n        var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n        this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n        var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n        return new ChangeDetails({\n          tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n        });\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos, direction) {\n        if (!this.thousandsSeparator) return cursorPos;\n\n        switch (direction) {\n          case DIRECTION.NONE:\n          case DIRECTION.LEFT:\n          case DIRECTION.FORCE_LEFT:\n            {\n              var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n              if (separatorAtLeftPos >= 0) {\n                var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n                if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                  return separatorAtLeftPos;\n                }\n              }\n\n              break;\n            }\n\n          case DIRECTION.RIGHT:\n          case DIRECTION.FORCE_RIGHT:\n            {\n              var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n              if (separatorAtRightPos >= 0) {\n                return separatorAtRightPos + this.thousandsSeparator.length;\n              }\n            }\n        }\n\n        return cursorPos;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate(flags) {\n        var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n        var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n        if (valid) {\n          // validate as number\n          var number = this.number;\n          valid = valid && !isNaN(number) && (this.min == null || this.min >= 0 || this.min <= this.number) && (this.max == null || this.max <= 0 || this.number <= this.max);\n        }\n\n        return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        if (this.value) {\n          var number = this.number;\n          var validnum = number; // check bounds\n\n          if (this.min != null) validnum = Math.max(validnum, this.min);\n          if (this.max != null) validnum = Math.min(validnum, this.max);\n          if (validnum !== number) this.unmaskedValue = String(validnum);\n          var formatted = this.value;\n          if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n          if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\n          this._value = formatted;\n        }\n\n        _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n      }\n      /** */\n\n    }, {\n      key: \"_normalizeZeros\",\n      value: function _normalizeZeros(value) {\n        var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n        parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n          return sign + num;\n        }); // add leading zero\n\n        if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n        if (parts.length > 1) {\n          parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n          if (!parts[1].length) parts.length = 1; // remove fractional\n        }\n\n        return this._insertThousandsSeparators(parts.join(this.radix));\n      }\n      /** */\n\n    }, {\n      key: \"_padFractionalZeros\",\n      value: function _padFractionalZeros(value) {\n        if (!value) return value;\n        var parts = value.split(this.radix);\n        if (parts.length < 2) parts.push('');\n        parts[1] = parts[1].padEnd(this.scale, '0');\n        return parts.join(this.radix);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n      },\n      set: function set(unmaskedValue) {\n        _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return Number(this.unmaskedValue);\n      },\n      set: function set(n) {\n        _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n      }\n      /** Parsed Number */\n\n    }, {\n      key: \"number\",\n      get: function get() {\n        return this.typedValue;\n      },\n      set: function set(number) {\n        this.typedValue = number;\n      }\n      /**\n        Is negative allowed\n        @readonly\n      */\n\n    }, {\n      key: \"allowNegative\",\n      get: function get() {\n        return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n      }\n    }]);\n\n    return MaskedNumber;\n  }(Masked);\n\n  MaskedNumber.DEFAULTS = {\n    radix: ',',\n    thousandsSeparator: '',\n    mapToRadix: ['.'],\n    scale: 2,\n    signed: false,\n    normalizeZeros: true,\n    padFractionalZeros: false\n  };\n  IMask.MaskedNumber = MaskedNumber;\n  /** Masking by custom Function */\n\n  var MaskedFunction = /*#__PURE__*/function (_Masked) {\n    _inherits(MaskedFunction, _Masked);\n\n    var _super = _createSuper(MaskedFunction);\n\n    function MaskedFunction() {\n      _classCallCheck(this, MaskedFunction);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MaskedFunction, [{\n      key: \"_update\",\n      value:\n      /**\n        @override\n        @param {Object} opts\n      */\n      function _update(opts) {\n        if (opts.mask) opts.validate = opts.mask;\n\n        _get(_getPrototypeOf(MaskedFunction.prototype), \"_update\", this).call(this, opts);\n      }\n    }]);\n\n    return MaskedFunction;\n  }(Masked);\n\n  IMask.MaskedFunction = MaskedFunction;\n  var _excluded = [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"];\n  /** Dynamic mask for choosing apropriate mask in run-time */\n\n  var MaskedDynamic = /*#__PURE__*/function (_Masked) {\n    _inherits(MaskedDynamic, _Masked);\n\n    var _super = _createSuper(MaskedDynamic);\n    /** Currently chosen mask */\n\n    /** Compliled {@link Masked} options */\n\n    /** Chooses {@link Masked} depending on input value */\n\n    /**\n      @param {Object} opts\n    */\n\n\n    function MaskedDynamic(opts) {\n      var _this;\n\n      _classCallCheck(this, MaskedDynamic);\n\n      _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));\n      _this.currentMask = null;\n      return _this;\n    }\n    /**\n      @override\n    */\n\n\n    _createClass(MaskedDynamic, [{\n      key: \"_update\",\n      value: function _update(opts) {\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"_update\", this).call(this, opts);\n\n        if ('mask' in opts) {\n          // mask could be totally dynamic with only `dispatch` option\n          this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n            return createMask(m);\n          }) : [];\n        }\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var details = this._applyDispatch(ch, flags);\n\n        if (this.currentMask) {\n          details.aggregate(this.currentMask._appendChar(ch, flags));\n        }\n\n        return details;\n      }\n    }, {\n      key: \"_applyDispatch\",\n      value: function _applyDispatch() {\n        var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n        var inputValue = this.rawInputValue;\n        var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\n        flags._beforeTailState._rawInputValue : inputValue;\n        var tailValue = inputValue.slice(insertValue.length);\n        var prevMask = this.currentMask;\n        var details = new ChangeDetails();\n        var prevMaskState = prevMask && prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\n\n        this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\n\n        if (this.currentMask) {\n          if (this.currentMask !== prevMask) {\n            // if mask changed reapply input\n            this.currentMask.reset();\n\n            if (insertValue) {\n              // $FlowFixMe - it's ok, we don't change current mask above\n              var d = this.currentMask.append(insertValue, {\n                raw: true\n              });\n              details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n            }\n\n            if (tailValue) {\n              // $FlowFixMe - it's ok, we don't change current mask above\n              details.tailShift += this.currentMask.append(tailValue, {\n                raw: true,\n                tail: true\n              }).tailShift;\n            }\n          } else {\n            // Dispatch can do something bad with state, so\n            // restore prev mask state\n            this.currentMask.state = prevMaskState;\n          }\n        }\n\n        return details;\n      }\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder() {\n        var details = this._applyDispatch.apply(this, arguments);\n\n        if (this.currentMask) {\n          details.aggregate(this.currentMask._appendPlaceholder());\n        }\n\n        return details;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doDispatch\",\n      value: function doDispatch(appended) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.dispatch(appended, this, flags);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _get2, _this$currentMask;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.currentMask || (_this$currentMask = this.currentMask).doValidate.apply(_this$currentMask, args));\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        if (this.currentMask) this.currentMask.reset();\n        this.compiledMasks.forEach(function (m) {\n          return m.reset();\n        });\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.currentMask ? this.currentMask.value : '';\n      },\n      set: function set(value) {\n        _set(_getPrototypeOf(MaskedDynamic.prototype), \"value\", value, this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.currentMask ? this.currentMask.unmaskedValue : '';\n      },\n      set: function set(unmaskedValue) {\n        _set(_getPrototypeOf(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return this.currentMask ? this.currentMask.typedValue : '';\n      } // probably typedValue should not be used with dynamic\n      ,\n      set: function set(value) {\n        var unmaskedValue = String(value); // double check it\n\n        if (this.currentMask) {\n          this.currentMask.typedValue = value;\n          unmaskedValue = this.currentMask.unmaskedValue;\n        }\n\n        this.unmaskedValue = unmaskedValue;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return !!this.currentMask && this.currentMask.isComplete;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var details = new ChangeDetails();\n\n        if (this.currentMask) {\n          var _this$currentMask2;\n\n          details.aggregate((_this$currentMask2 = this.currentMask).remove.apply(_this$currentMask2, arguments)) // update with dispatch\n          .aggregate(this._applyDispatch());\n        }\n\n        return details;\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"state\",\n      get: function get() {\n        return Object.assign({}, _get(_getPrototypeOf(MaskedDynamic.prototype), \"state\", this), {\n          _rawInputValue: this.rawInputValue,\n          compiledMasks: this.compiledMasks.map(function (m) {\n            return m.state;\n          }),\n          currentMaskRef: this.currentMask,\n          currentMask: this.currentMask && this.currentMask.state\n        });\n      },\n      set: function set(state) {\n        var compiledMasks = state.compiledMasks,\n            currentMaskRef = state.currentMaskRef,\n            currentMask = state.currentMask,\n            maskedState = _objectWithoutProperties(state, _excluded);\n\n        this.compiledMasks.forEach(function (m, mi) {\n          return m.state = compiledMasks[mi];\n        });\n\n        if (currentMaskRef != null) {\n          this.currentMask = currentMaskRef;\n          this.currentMask.state = currentMask;\n        }\n\n        _set(_getPrototypeOf(MaskedDynamic.prototype), \"state\", maskedState, this, true);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var _this$currentMask3;\n\n        return this.currentMask ? (_this$currentMask3 = this.currentMask).extractInput.apply(_this$currentMask3, arguments) : '';\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var _this$currentMask4, _get3;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return this.currentMask ? (_this$currentMask4 = this.currentMask).extractTail.apply(_this$currentMask4, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get3, [this].concat(args));\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        if (this.currentMask) this.currentMask.doCommit();\n\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"doCommit\", this).call(this);\n      }\n      /**\n        @override\n      */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos() {\n        var _this$currentMask5, _get4;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return this.currentMask ? (_this$currentMask5 = this.currentMask).nearestInputPos.apply(_this$currentMask5, args) : (_get4 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get4, [this].concat(args));\n      }\n    }, {\n      key: \"overwrite\",\n      get: function get() {\n        return this.currentMask ? this.currentMask.overwrite : _get(_getPrototypeOf(MaskedDynamic.prototype), \"overwrite\", this);\n      },\n      set: function set(overwrite) {\n        console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\n      }\n    }]);\n\n    return MaskedDynamic;\n  }(Masked);\n\n  MaskedDynamic.DEFAULTS = {\n    dispatch: function dispatch(appended, masked, flags) {\n      if (!masked.compiledMasks.length) return;\n      var inputValue = masked.rawInputValue; // simulate input\n\n      var inputs = masked.compiledMasks.map(function (m, index) {\n        m.reset();\n        m.append(inputValue, {\n          raw: true\n        });\n        m.append(appended, flags);\n        var weight = m.rawInputValue.length;\n        return {\n          weight: weight,\n          index: index\n        };\n      }); // pop masks with longer values first\n\n      inputs.sort(function (i1, i2) {\n        return i2.weight - i1.weight;\n      });\n      return masked.compiledMasks[inputs[0].index];\n    }\n  };\n  IMask.MaskedDynamic = MaskedDynamic;\n  /** Mask pipe source and destination types */\n\n  var PIPE_TYPE = {\n    MASKED: 'value',\n    UNMASKED: 'unmaskedValue',\n    TYPED: 'typedValue'\n  };\n  /** Creates new pipe function depending on mask type, source and destination options */\n\n  function createPipe(mask) {\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\n    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\n    var masked = createMask(mask);\n    return function (value) {\n      return masked.runIsolated(function (m) {\n        m[from] = value;\n        return m[to];\n      });\n    };\n  }\n  /** Pipes value through mask depending on mask type, source and destination options */\n\n\n  function pipe(value) {\n    for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      pipeArgs[_key - 1] = arguments[_key];\n    }\n\n    return createPipe.apply(void 0, pipeArgs)(value);\n  }\n\n  IMask.PIPE_TYPE = PIPE_TYPE;\n  IMask.createPipe = createPipe;\n  IMask.pipe = pipe;\n\n  try {\n    globalThis.IMask = IMask;\n  } catch (e) {}\n\n  exports.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n  exports.HTMLMaskElement = HTMLMaskElement;\n  exports.InputMask = InputMask;\n  exports.MaskElement = MaskElement;\n  exports.Masked = Masked;\n  exports.MaskedDate = MaskedDate;\n  exports.MaskedDynamic = MaskedDynamic;\n  exports.MaskedEnum = MaskedEnum;\n  exports.MaskedFunction = MaskedFunction;\n  exports.MaskedNumber = MaskedNumber;\n  exports.MaskedPattern = MaskedPattern;\n  exports.MaskedRange = MaskedRange;\n  exports.MaskedRegExp = MaskedRegExp;\n  exports.PIPE_TYPE = PIPE_TYPE;\n  exports.createMask = createMask;\n  exports.createPipe = createPipe;\n  exports['default'] = IMask;\n  exports.pipe = pipe;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('ready!');\n}, false);\nvar element = document.getElementById('selector');\nvar maskOptions = {\n  mask: '+{7}(000)000-00-00'\n};\nvar mask = IMask(element, maskOptions);\nvar currentTab = 0; // Current tab is set to be the first tab (0)\n\nvar currentTabGroup = 0;\nvar currentTabGroupThanks = 0;\nvar currentTabIndex = 0;\nvar tabsCounter = document.querySelectorAll('.tab-group')[currentTabGroup].querySelectorAll('.tab').length;\nshowTab(currentTab); // Display the current tab\n// show .form-header \n\nfunction showHeader() {\n  var headers = document.querySelectorAll('.form-header');\n\n  if (document.querySelectorAll('.tab')[currentTab].matches('.thanks')) {\n    currentTabGroupThanks++;\n\n    _toConsumableArray(headers).map(function (e) {\n      return e.classList.remove('show');\n    });\n\n    return;\n  }\n\n  _toConsumableArray(headers).map(function (e) {\n    return e.classList.remove('show');\n  });\n\n  if (currentTabGroup === 0) {\n    if (currentTab === 0) {\n      headers[0].classList.add('show');\n    } else {\n      headers[currentTab - currentTabGroupThanks].classList.add('show');\n    }\n  } else {\n    headers[currentTab - currentTabGroupThanks].classList.add('show');\n  }\n} // progress line\n\n\nfunction progress() {\n  var progress = document.querySelector('.progress');\n\n  if (progress !== null) {\n    // Progress Line\n    var currentTabNumber = currentTab - currentTabGroupThanks + 1;\n    var currentProgress = 100 / document.querySelectorAll(\".tab:not(.thanks)\").length * currentTabNumber;\n    progress.querySelector('.progress-done').style.width = currentProgress + \"%\"; // Counter\n\n    progress.querySelector('.total-pages').textContent = document.querySelectorAll(\".tab:not(.thanks)\").length; // total pages\n\n    progress.querySelector('.current-page').textContent = currentTabNumber; // current page\n  }\n}\n\nfunction showTab(n) {\n  console.log(\"Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÑ: \" + (currentTab + 1));\n  progress();\n  showHeader();\n\n  if (document.querySelector(\".tab\") !== null) {\n    // This function will display the specified tab of the form ...\n    var x = document.querySelectorAll(\".tab\");\n    x[n].classList.add('active'); // ... and fix the Previous/Next buttons:\n\n    if (currentTab === 0) {\n      document.querySelector('#nextBtn').textContent = \"ÐÐ°ÑÐ½ÐµÐ¼!\";\n    }\n\n    if (tabsCounter === document.querySelectorAll('.tab-group')[currentTabGroup].querySelectorAll('.tab').length || document.querySelectorAll('.tab')[currentTab].matches('.thanks')) {\n      document.querySelector('#prevBtn').classList.add('hide');\n      document.querySelector('#prevBtn').classList.remove('show');\n    } else {\n      document.querySelector('#prevBtn').classList.add('show');\n      document.querySelector('#prevBtn').classList.remove('hide');\n      document.querySelector('#nextBtn').textContent = \"ÐÐ°Ð»ÑÑÐµ\";\n    }\n\n    if (n + 1 === x.length) {\n      document.querySelector(\"#nextBtn\").innerHTML = \"ÐÐ¾ÑÐ¾Ð²Ð¾\";\n    }\n  }\n}\n\nfunction nextPrev(n) {\n  // This function will figure out which tab to display\n  var x = document.querySelectorAll(\".tab\"); // Exit the function if any field in the current tab is invalid:\n\n  if (n == 1 && !validateForm()) return false; // Hide the current tab:\n\n  x[currentTab].classList.remove('active'); // Increase or decrease the current tab by 1:\n\n  currentTab += n;\n  tabsCounter += n > 0 ? -1 : 1;\n\n  if (tabsCounter <= 0) {\n    nextGroup();\n  } // if you have reached the end of the form... :\n\n\n  if (currentTab >= x.length) {\n    return false;\n  }\n\n  if (document.querySelectorAll('.tab')[currentTab].matches('.thanks')) {\n    hideFormUI();\n  } else {\n    showFormUI();\n  } // Otherwise, display the correct tab:\n\n\n  showTab(currentTab);\n}\n\nfunction nextGroup() {\n  currentTabGroup++; // Ð¾Ð±Ð½ÑÐ»ÑÐµÐ¼ ÑÑÐµÑÑÐ¸Ðº ÑÐ°Ð±Ð¾Ð² Ð² ÑÐµÐºÑÑÐµÐ¼ tab group\n\n  tabsCounter = document.querySelectorAll('.tab-group')[currentTabGroup].querySelectorAll('.tab').length;\n  document.querySelector('#prevBtn').classList.add('hide');\n\n  _toConsumableArray(document.querySelectorAll('.tab-group')).map(function (e) {\n    return e.classList.remove('active');\n  });\n\n  document.querySelectorAll('.tab-group')[currentTabGroup].classList.add('active');\n}\n\nfunction hideFormUI() {\n  var headers = document.querySelectorAll('.form-header');\n  document.querySelector('.panel-footer').classList.add('hide');\n  document.querySelector('.progress').classList.add('hide');\n\n  _toConsumableArray(headers).map(function (e) {\n    return e.classList.remove('show');\n  });\n}\n\nfunction showFormUI() {\n  var headers = document.querySelectorAll('.form-header');\n  document.querySelector('.panel-footer').classList.remove('hide');\n  document.querySelector('.progress').classList.remove('hide');\n  headers[0].classList.add('show');\n} // ÐÐ°Ð»Ð¸Ð´Ð°ÑÐ¸Ñ\n\n\nfunction validateForm() {\n  // This function deals with validation of the form fields\n  var requireds,\n      tab,\n      required,\n      valid = true;\n  tab = document.querySelectorAll(\".tab\")[currentTab];\n  requireds = tab.querySelectorAll(\".required\");\n\n  for (var i = 0; i < requireds.length; i++) {\n    if (requireds[i].matches('.input')) {\n      // ÐµÑÐ»Ð¸ ÐµÑÑÑ ÐºÐ»Ð°ÑÑ .input\n      if (requireds[i].querySelectorAll('input[type=\"text\"]').length > 0) {\n        // Ð·Ð½Ð°ÑÐ¸Ñ Ð¸ÑÐµÐ¼ Ð²Ð½ÑÑÑÐ¸ Ð²ÑÐµ Ð¸Ð½Ð¿ÑÑÑ\n        var inputs = requireds[i].querySelectorAll('input[type=\"text\"]');\n\n        for (var j = 0; j < inputs.length; j++) {\n          if (inputs[j].value == \"\") {\n            inputs[j].closest('.input').className += \" invalid\";\n            valid = false;\n          }\n        }\n      }\n    } // Ð´Ð»Ñ ÑÐ°Ð´Ð¸Ð¾ Ð³ÑÑÐ¿Ð¿\n\n\n    if (requireds[i].matches('.radio-group')) {\n      if (!requireds[i].querySelector('input[type=\"radio\"]:checked')) {\n        requireds[i].classList.add('invalid');\n        valid = false;\n      }\n    } // Ð´Ð»Ñ ÑÐµÐºÐ±Ð¾ÐºÑ Ð³ÑÑÐ¿Ð¿\n\n\n    if (requireds[i].matches('.checkbox-group')) {\n      if (!requireds[i].querySelector('input[type=\"checkbox\"]:checked')) {\n        requireds[i].classList.add('invalid');\n        valid = false;\n      }\n    } // Ð´Ð»Ñ ÑÐµÐºÑÑÐ°ÑÐµÐ° Ð³ÑÑÐ¿Ð¿\n\n\n    if (requireds[i].matches('.textarea')) {\n      // ÐµÑÐ»Ð¸ ÐµÑÑÑ ÐºÐ»Ð°ÑÑ .input\n      if (requireds[i].querySelectorAll('textarea').length > 0) {\n        // Ð·Ð½Ð°ÑÐ¸Ñ Ð¸ÑÐµÐ¼ Ð²Ð½ÑÑÑÐ¸ Ð²ÑÐµ Ð¸Ð½Ð¿ÑÑÑ\n        var _inputs = requireds[i].querySelectorAll('textarea');\n\n        for (var j = 0; j < _inputs.length; j++) {\n          if (_inputs[j].value == \"\") {\n            _inputs[j].closest('.textarea').className += \" invalid\";\n            valid = false;\n          }\n        }\n      }\n    }\n  }\n\n  return valid; // return the valid status\n} // Ð£Ð±Ð¸ÑÐ°ÐµÐ¼ .invalid ÐµÑÐ»Ð¸ Ð¸Ð½Ð¿ÑÑ Ð½Ð°ÑÐ°Ð»Ð¸ Ð·Ð°Ð¿Ð¾Ð»Ð½ÑÑÑ / Ð²ÑÐ±ÑÐ°Ð½ ÑÐ¾ÑÑ 1 ÑÐµÐº/ÑÐ°Ð´Ð¸Ð¾-Ð±Ð¾ÐºÑ\n// Ð´Ð»Ñ Ð¸Ð½Ð¿ÑÑÐ¾Ð²\n\n\nfor (var i = 0; i < document.querySelectorAll('.required input[type=\"text\"]').length; i++) {\n  document.querySelectorAll('.required input[type=\"text\"]')[i].addEventListener(\"input\", function (e) {\n    e.target.closest('.required').classList.remove('invalid');\n  });\n} // Ð´Ð»Ñ ÑÐ°Ð´Ð¸Ð¾\n\n\nfor (var i = 0; i < document.querySelectorAll('.required input[type=\"radio\"]').length; i++) {\n  document.querySelectorAll('.required input[type=\"radio\"]')[i].addEventListener(\"input\", function (e) {\n    e.target.closest('.required').classList.remove('invalid');\n  });\n} // Ð´Ð»Ñ ÑÐµÐºÐ±Ð¾ÐºÑÐ¾Ð²\n\n\nfor (var i = 0; i < document.querySelectorAll('.required input[type=\"checkbox\"]').length; i++) {\n  document.querySelectorAll('.required input[type=\"checkbox\"]')[i].addEventListener(\"input\", function (e) {\n    e.target.closest('.required').classList.remove('invalid');\n  });\n} // Ð´Ð»Ñ textarea\n\n\nfor (var i = 0; i < document.querySelectorAll('.required textarea').length; i++) {\n  document.querySelectorAll('.required textarea')[i].addEventListener(\"input\", function (e) {\n    e.target.closest('.required').classList.remove('invalid');\n  });\n}"],"file":"app.js"}